/*
 * generated by Xtext 2.12.0
 */
package com.sysma.goat.eclipse_plugin.ide.contentassist.antlr;

import com.google.inject.Inject;
import com.sysma.goat.eclipse_plugin.ide.contentassist.antlr.internal.InternalGoatComponentsParser;
import com.sysma.goat.eclipse_plugin.services.GoatComponentsGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class GoatComponentsParser extends AbstractContentAssistParser {

	@Inject
	private GoatComponentsGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalGoatComponentsParser createParser() {
		InternalGoatComponentsParser result = new InternalGoatComponentsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getAlternatives_3(), "rule__Model__Alternatives_3");
					put(grammarAccess.getProcessDefinitionAccess().getAlternatives_2(), "rule__ProcessDefinition__Alternatives_2");
					put(grammarAccess.getProcessStatementAccess().getAlternatives(), "rule__ProcessStatement__Alternatives");
					put(grammarAccess.getProcessReceiveAccess().getAlternatives(), "rule__ProcessReceive__Alternatives");
					put(grammarAccess.getProcessThenBlockAccess().getActionAlternatives_1_0(), "rule__ProcessThenBlock__ActionAlternatives_1_0");
					put(grammarAccess.getUpdateAccess().getAttributeAlternatives_1_1_0(), "rule__Update__AttributeAlternatives_1_1_0");
					put(grammarAccess.getUpdateAccess().getAttributeAlternatives_1_4_1_0(), "rule__Update__AttributeAlternatives_1_4_1_0");
					put(grammarAccess.getEnvInitValueAccess().getAlternatives(), "rule__EnvInitValue__Alternatives");
					put(grammarAccess.getEnvInitValueAccess().getValueAlternatives_3_1_0(), "rule__EnvInitValue__ValueAlternatives_3_1_0");
					put(grammarAccess.getComponentDefinitionAccess().getAlternatives_1(), "rule__ComponentDefinition__Alternatives_1");
					put(grammarAccess.getComponentDefinitionAccess().getBlockAlternatives_3_0(), "rule__ComponentDefinition__BlockAlternatives_3_0");
					put(grammarAccess.getEqualityAccess().getOpAlternatives_1_1_0(), "rule__Equality__OpAlternatives_1_1_0");
					put(grammarAccess.getComparisonAccess().getOpAlternatives_1_1_0(), "rule__Comparison__OpAlternatives_1_1_0");
					put(grammarAccess.getPlusOrMinusAccess().getAlternatives_1_0(), "rule__PlusOrMinus__Alternatives_1_0");
					put(grammarAccess.getMulOrDivAccess().getOpAlternatives_1_1_0(), "rule__MulOrDiv__OpAlternatives_1_1_0");
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getLRefAccess().getAlternatives(), "rule__LRef__Alternatives");
					put(grammarAccess.getAtomicAccess().getAlternatives(), "rule__Atomic__Alternatives");
					put(grammarAccess.getAtomicAccess().getValueAlternatives_2_1_0(), "rule__Atomic__ValueAlternatives_2_1_0");
					put(grammarAccess.getFuncStatementAccess().getAlternatives(), "rule__FuncStatement__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getProcessDefinitionAccess().getGroup(), "rule__ProcessDefinition__Group__0");
					put(grammarAccess.getProcessDefinitionAccess().getGroup_2_0(), "rule__ProcessDefinition__Group_2_0__0");
					put(grammarAccess.getPDPBlockAccess().getGroup(), "rule__PDPBlock__Group__0");
					put(grammarAccess.getPDPBlockAccess().getGroup_0(), "rule__PDPBlock__Group_0__0");
					put(grammarAccess.getProcessBlockAccess().getGroup(), "rule__ProcessBlock__Group__0");
					put(grammarAccess.getProcessSpawnAccess().getGroup(), "rule__ProcessSpawn__Group__0");
					put(grammarAccess.getProcessCallAccess().getGroup(), "rule__ProcessCall__Group__0");
					put(grammarAccess.getProcessSendAccess().getGroup(), "rule__ProcessSend__Group__0");
					put(grammarAccess.getProcessSendAccess().getGroup_2(), "rule__ProcessSend__Group_2__0");
					put(grammarAccess.getProcessSendAccess().getGroup_2_1(), "rule__ProcessSend__Group_2_1__0");
					put(grammarAccess.getProcessReceiveSingleAccess().getGroup(), "rule__ProcessReceiveSingle__Group__0");
					put(grammarAccess.getProcessReceiveMultipleAccess().getGroup(), "rule__ProcessReceiveMultiple__Group__0");
					put(grammarAccess.getProcessReceiveMultipleAccess().getGroup_2(), "rule__ProcessReceiveMultiple__Group_2__0");
					put(grammarAccess.getReceiveCaseAccess().getGroup(), "rule__ReceiveCase__Group__0");
					put(grammarAccess.getReceiveCaseAccess().getGroup_4(), "rule__ReceiveCase__Group_4__0");
					put(grammarAccess.getReceiveCaseAccess().getGroup_4_1(), "rule__ReceiveCase__Group_4_1__0");
					put(grammarAccess.getProcessIfAccess().getGroup(), "rule__ProcessIf__Group__0");
					put(grammarAccess.getProcessIfAccess().getGroup_5(), "rule__ProcessIf__Group_5__0");
					put(grammarAccess.getProcessIfAccess().getGroup_6(), "rule__ProcessIf__Group_6__0");
					put(grammarAccess.getProcessThenBlockAccess().getGroup(), "rule__ProcessThenBlock__Group__0");
					put(grammarAccess.getPTBThenAccess().getGroup(), "rule__PTBThen__Group__0");
					put(grammarAccess.getProcessSetAccess().getGroup(), "rule__ProcessSet__Group__0");
					put(grammarAccess.getProcessWaitForAccess().getGroup(), "rule__ProcessWaitFor__Group__0");
					put(grammarAccess.getProcessLoopAccess().getGroup(), "rule__ProcessLoop__Group__0");
					put(grammarAccess.getUpdateAccess().getGroup(), "rule__Update__Group__0");
					put(grammarAccess.getUpdateAccess().getGroup_1(), "rule__Update__Group_1__0");
					put(grammarAccess.getUpdateAccess().getGroup_1_4(), "rule__Update__Group_1_4__0");
					put(grammarAccess.getUpdateComponentAttributeAccess().getGroup(), "rule__UpdateComponentAttribute__Group__0");
					put(grammarAccess.getUpdateLocalAttributeAccess().getGroup(), "rule__UpdateLocalAttribute__Group__0");
					put(grammarAccess.getPrintAllStatementAccess().getGroup(), "rule__PrintAllStatement__Group__0");
					put(grammarAccess.getPrintFormattedStatementAccess().getGroup(), "rule__PrintFormattedStatement__Group__0");
					put(grammarAccess.getEnvInitValueAccess().getGroup_0(), "rule__EnvInitValue__Group_0__0");
					put(grammarAccess.getEnvInitValueAccess().getGroup_1(), "rule__EnvInitValue__Group_1__0");
					put(grammarAccess.getEnvInitValueAccess().getGroup_2(), "rule__EnvInitValue__Group_2__0");
					put(grammarAccess.getEnvInitValueAccess().getGroup_3(), "rule__EnvInitValue__Group_3__0");
					put(grammarAccess.getEnvironmentAccess().getGroup(), "rule__Environment__Group__0");
					put(grammarAccess.getEnvironmentAccess().getGroup_2(), "rule__Environment__Group_2__0");
					put(grammarAccess.getEnvironmentAccess().getGroup_2_3(), "rule__Environment__Group_2_3__0");
					put(grammarAccess.getEnvironmentDefinitionAccess().getGroup(), "rule__EnvironmentDefinition__Group__0");
					put(grammarAccess.getComponentDefinitionAccess().getGroup(), "rule__ComponentDefinition__Group__0");
					put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
					put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
					put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
					put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
					put(grammarAccess.getEqualityAccess().getGroup(), "rule__Equality__Group__0");
					put(grammarAccess.getEqualityAccess().getGroup_1(), "rule__Equality__Group_1__0");
					put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
					put(grammarAccess.getComparisonAccess().getGroup_1(), "rule__Comparison__Group_1__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup(), "rule__PlusOrMinus__Group__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup_1(), "rule__PlusOrMinus__Group_1__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_0(), "rule__PlusOrMinus__Group_1_0_0__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_1(), "rule__PlusOrMinus__Group_1_0_1__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_2(), "rule__PlusOrMinus__Group_1_0_2__0");
					put(grammarAccess.getMulOrDivAccess().getGroup(), "rule__MulOrDiv__Group__0");
					put(grammarAccess.getMulOrDivAccess().getGroup_1(), "rule__MulOrDiv__Group_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_0(), "rule__Primary__Group_0__0");
					put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_2(), "rule__Primary__Group_2__0");
					put(grammarAccess.getAtomicAccess().getGroup_0(), "rule__Atomic__Group_0__0");
					put(grammarAccess.getAtomicAccess().getGroup_1(), "rule__Atomic__Group_1__0");
					put(grammarAccess.getAtomicAccess().getGroup_2(), "rule__Atomic__Group_2__0");
					put(grammarAccess.getAtomicAccess().getGroup_3(), "rule__Atomic__Group_3__0");
					put(grammarAccess.getAtomicAccess().getGroup_4(), "rule__Atomic__Group_4__0");
					put(grammarAccess.getAtomicAccess().getGroup_5(), "rule__Atomic__Group_5__0");
					put(grammarAccess.getAtomicAccess().getGroup_5_3(), "rule__Atomic__Group_5_3__0");
					put(grammarAccess.getAtomicAccess().getGroup_5_3_1(), "rule__Atomic__Group_5_3_1__0");
					put(grammarAccess.getAtomicAccess().getGroup_6(), "rule__Atomic__Group_6__0");
					put(grammarAccess.getAtomicAccess().getGroup_7(), "rule__Atomic__Group_7__0");
					put(grammarAccess.getFuncParamAccess().getGroup(), "rule__FuncParam__Group__0");
					put(grammarAccess.getFuncDefinitionAccess().getGroup(), "rule__FuncDefinition__Group__0");
					put(grammarAccess.getFuncDefinitionAccess().getGroup_4(), "rule__FuncDefinition__Group_4__0");
					put(grammarAccess.getFuncDefinitionAccess().getGroup_4_1(), "rule__FuncDefinition__Group_4_1__0");
					put(grammarAccess.getFuncBlockAccess().getGroup(), "rule__FuncBlock__Group__0");
					put(grammarAccess.getFuncVarDeclarationAccess().getGroup(), "rule__FuncVarDeclaration__Group__0");
					put(grammarAccess.getFuncVarAssignAccess().getGroup(), "rule__FuncVarAssign__Group__0");
					put(grammarAccess.getFuncIfElseAccess().getGroup(), "rule__FuncIfElse__Group__0");
					put(grammarAccess.getFuncIfElseAccess().getGroup_5(), "rule__FuncIfElse__Group_5__0");
					put(grammarAccess.getFuncIfElseAccess().getGroup_6(), "rule__FuncIfElse__Group_6__0");
					put(grammarAccess.getFuncReturnAccess().getGroup(), "rule__FuncReturn__Group__0");
					put(grammarAccess.getModelAccess().getInfrastructureAssignment_2(), "rule__Model__InfrastructureAssignment_2");
					put(grammarAccess.getModelAccess().getProcessesAssignment_3_0(), "rule__Model__ProcessesAssignment_3_0");
					put(grammarAccess.getModelAccess().getComponentsAssignment_3_1(), "rule__Model__ComponentsAssignment_3_1");
					put(grammarAccess.getModelAccess().getFunctionsAssignment_3_2(), "rule__Model__FunctionsAssignment_3_2");
					put(grammarAccess.getModelAccess().getEnvironmentsAssignment_3_3(), "rule__Model__EnvironmentsAssignment_3_3");
					put(grammarAccess.getProcessDefinitionAccess().getNameAssignment_1(), "rule__ProcessDefinition__NameAssignment_1");
					put(grammarAccess.getProcessDefinitionAccess().getBlockAssignment_2_0_1(), "rule__ProcessDefinition__BlockAssignment_2_0_1");
					put(grammarAccess.getProcessDefinitionAccess().getBlockAssignment_2_1(), "rule__ProcessDefinition__BlockAssignment_2_1");
					put(grammarAccess.getPDPBlockAccess().getStatementsAssignment_0_0(), "rule__PDPBlock__StatementsAssignment_0_0");
					put(grammarAccess.getPDPBlockAccess().getStatementsAssignment_1(), "rule__PDPBlock__StatementsAssignment_1");
					put(grammarAccess.getPDPSpawnAccess().getProcAssignment(), "rule__PDPSpawn__ProcAssignment");
					put(grammarAccess.getPDPCallAccess().getProcAssignment(), "rule__PDPCall__ProcAssignment");
					put(grammarAccess.getProcessBlockAccess().getStatementsAssignment_2(), "rule__ProcessBlock__StatementsAssignment_2");
					put(grammarAccess.getProcessSpawnAccess().getProcAssignment_2(), "rule__ProcessSpawn__ProcAssignment_2");
					put(grammarAccess.getProcessCallAccess().getProcAssignment_2(), "rule__ProcessCall__ProcAssignment_2");
					put(grammarAccess.getProcessSendAccess().getMsgOutPartsAssignment_2_0(), "rule__ProcessSend__MsgOutPartsAssignment_2_0");
					put(grammarAccess.getProcessSendAccess().getMsgOutPartsAssignment_2_1_1(), "rule__ProcessSend__MsgOutPartsAssignment_2_1_1");
					put(grammarAccess.getProcessSendAccess().getSend_predAssignment_6(), "rule__ProcessSend__Send_predAssignment_6");
					put(grammarAccess.getProcessSendAccess().getUpdatesAssignment_8(), "rule__ProcessSend__UpdatesAssignment_8");
					put(grammarAccess.getProcessSendAccess().getPrintAssignment_9(), "rule__ProcessSend__PrintAssignment_9");
					put(grammarAccess.getProcessReceiveSingleAccess().getCasesAssignment_1(), "rule__ProcessReceiveSingle__CasesAssignment_1");
					put(grammarAccess.getProcessReceiveSingleAccess().getThenAssignment_3(), "rule__ProcessReceiveSingle__ThenAssignment_3");
					put(grammarAccess.getProcessReceiveMultipleAccess().getCasesAssignment_2_1(), "rule__ProcessReceiveMultiple__CasesAssignment_2_1");
					put(grammarAccess.getProcessReceiveMultipleAccess().getThenAssignment_2_3(), "rule__ProcessReceiveMultiple__ThenAssignment_2_3");
					put(grammarAccess.getReceiveCaseAccess().getCondAssignment_1(), "rule__ReceiveCase__CondAssignment_1");
					put(grammarAccess.getReceiveCaseAccess().getMsgInPartsAssignment_4_0(), "rule__ReceiveCase__MsgInPartsAssignment_4_0");
					put(grammarAccess.getReceiveCaseAccess().getMsgInPartsAssignment_4_1_1(), "rule__ReceiveCase__MsgInPartsAssignment_4_1_1");
					put(grammarAccess.getReceiveCaseAccess().getUpdatesAssignment_6(), "rule__ReceiveCase__UpdatesAssignment_6");
					put(grammarAccess.getReceiveCaseAccess().getPrintAssignment_7(), "rule__ReceiveCase__PrintAssignment_7");
					put(grammarAccess.getProcessIfAccess().getCondAssignment_2(), "rule__ProcessIf__CondAssignment_2");
					put(grammarAccess.getProcessIfAccess().getCondAssignment_5_3(), "rule__ProcessIf__CondAssignment_5_3");
					put(grammarAccess.getProcessThenBlockAccess().getActionAssignment_1(), "rule__ProcessThenBlock__ActionAssignment_1");
					put(grammarAccess.getProcessThenBlockAccess().getThenAssignment_2(), "rule__ProcessThenBlock__ThenAssignment_2");
					put(grammarAccess.getPTBThenAccess().getStatementsAssignment_1(), "rule__PTBThen__StatementsAssignment_1");
					put(grammarAccess.getProcessSetAccess().getUpdateAssignment_1(), "rule__ProcessSet__UpdateAssignment_1");
					put(grammarAccess.getProcessSetAccess().getPrintAssignment_2(), "rule__ProcessSet__PrintAssignment_2");
					put(grammarAccess.getProcessWaitForAccess().getCondAssignment_2(), "rule__ProcessWaitFor__CondAssignment_2");
					put(grammarAccess.getProcessWaitForAccess().getUpdateAssignment_4(), "rule__ProcessWaitFor__UpdateAssignment_4");
					put(grammarAccess.getProcessWaitForAccess().getPrintAssignment_5(), "rule__ProcessWaitFor__PrintAssignment_5");
					put(grammarAccess.getProcessLoopAccess().getBlockAssignment_1(), "rule__ProcessLoop__BlockAssignment_1");
					put(grammarAccess.getUpdateAccess().getAttributeAssignment_1_1(), "rule__Update__AttributeAssignment_1_1");
					put(grammarAccess.getUpdateAccess().getValueAssignment_1_3(), "rule__Update__ValueAssignment_1_3");
					put(grammarAccess.getUpdateAccess().getAttributeAssignment_1_4_1(), "rule__Update__AttributeAssignment_1_4_1");
					put(grammarAccess.getUpdateAccess().getValueAssignment_1_4_3(), "rule__Update__ValueAssignment_1_4_3");
					put(grammarAccess.getUpdateComponentAttributeAccess().getAtnameAssignment_2(), "rule__UpdateComponentAttribute__AtnameAssignment_2");
					put(grammarAccess.getUpdateLocalAttributeAccess().getAtnameAssignment_2(), "rule__UpdateLocalAttribute__AtnameAssignment_2");
					put(grammarAccess.getPrintFormattedStatementAccess().getToPrintAssignment_2(), "rule__PrintFormattedStatement__ToPrintAssignment_2");
					put(grammarAccess.getEnvInitValueAccess().getNegvalueAssignment_0_2(), "rule__EnvInitValue__NegvalueAssignment_0_2");
					put(grammarAccess.getEnvInitValueAccess().getValueAssignment_1_1(), "rule__EnvInitValue__ValueAssignment_1_1");
					put(grammarAccess.getEnvInitValueAccess().getValueAssignment_2_1(), "rule__EnvInitValue__ValueAssignment_2_1");
					put(grammarAccess.getEnvInitValueAccess().getValueAssignment_3_1(), "rule__EnvInitValue__ValueAssignment_3_1");
					put(grammarAccess.getEnvironmentAccess().getAttrsAssignment_2_0(), "rule__Environment__AttrsAssignment_2_0");
					put(grammarAccess.getEnvironmentAccess().getValsAssignment_2_2(), "rule__Environment__ValsAssignment_2_2");
					put(grammarAccess.getEnvironmentAccess().getAttrsAssignment_2_3_1(), "rule__Environment__AttrsAssignment_2_3_1");
					put(grammarAccess.getEnvironmentAccess().getValsAssignment_2_3_3(), "rule__Environment__ValsAssignment_2_3_3");
					put(grammarAccess.getEnvironmentDefinitionAccess().getNameAssignment_1(), "rule__EnvironmentDefinition__NameAssignment_1");
					put(grammarAccess.getEnvironmentDefinitionAccess().getEnvAssignment_2(), "rule__EnvironmentDefinition__EnvAssignment_2");
					put(grammarAccess.getComponentDefinitionAccess().getEnvrefAssignment_1_0(), "rule__ComponentDefinition__EnvrefAssignment_1_0");
					put(grammarAccess.getComponentDefinitionAccess().getEnvAssignment_1_1(), "rule__ComponentDefinition__EnvAssignment_1_1");
					put(grammarAccess.getComponentDefinitionAccess().getBlockAssignment_3(), "rule__ComponentDefinition__BlockAssignment_3");
					put(grammarAccess.getOrAccess().getSubAssignment_1_2(), "rule__Or__SubAssignment_1_2");
					put(grammarAccess.getAndAccess().getSubAssignment_1_2(), "rule__And__SubAssignment_1_2");
					put(grammarAccess.getEqualityAccess().getOpAssignment_1_1(), "rule__Equality__OpAssignment_1_1");
					put(grammarAccess.getEqualityAccess().getRightAssignment_1_2(), "rule__Equality__RightAssignment_1_2");
					put(grammarAccess.getComparisonAccess().getOpAssignment_1_1(), "rule__Comparison__OpAssignment_1_1");
					put(grammarAccess.getComparisonAccess().getRightAssignment_1_2(), "rule__Comparison__RightAssignment_1_2");
					put(grammarAccess.getPlusOrMinusAccess().getRightAssignment_1_1(), "rule__PlusOrMinus__RightAssignment_1_1");
					put(grammarAccess.getMulOrDivAccess().getOpAssignment_1_1(), "rule__MulOrDiv__OpAssignment_1_1");
					put(grammarAccess.getMulOrDivAccess().getRightAssignment_1_2(), "rule__MulOrDiv__RightAssignment_1_2");
					put(grammarAccess.getPrimaryAccess().getExpressionAssignment_1_2(), "rule__Primary__ExpressionAssignment_1_2");
					put(grammarAccess.getPrimaryAccess().getExpressionAssignment_2_2(), "rule__Primary__ExpressionAssignment_2_2");
					put(grammarAccess.getAtomicAccess().getValueAssignment_0_1(), "rule__Atomic__ValueAssignment_0_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_1_1(), "rule__Atomic__ValueAssignment_1_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_2_1(), "rule__Atomic__ValueAssignment_2_1");
					put(grammarAccess.getAtomicAccess().getRefAssignment_3_1(), "rule__Atomic__RefAssignment_3_1");
					put(grammarAccess.getAtomicAccess().getAttributeAssignment_4_3(), "rule__Atomic__AttributeAssignment_4_3");
					put(grammarAccess.getAtomicAccess().getFunctionAssignment_5_1(), "rule__Atomic__FunctionAssignment_5_1");
					put(grammarAccess.getAtomicAccess().getParamsAssignment_5_3_0(), "rule__Atomic__ParamsAssignment_5_3_0");
					put(grammarAccess.getAtomicAccess().getParamsAssignment_5_3_1_1(), "rule__Atomic__ParamsAssignment_5_3_1_1");
					put(grammarAccess.getAtomicAccess().getAttributeAssignment_6_3(), "rule__Atomic__AttributeAssignment_6_3");
					put(grammarAccess.getAtomicAccess().getAttributeAssignment_7_3(), "rule__Atomic__AttributeAssignment_7_3");
					put(grammarAccess.getFuncParamAccess().getTypeAssignment_0(), "rule__FuncParam__TypeAssignment_0");
					put(grammarAccess.getFuncParamAccess().getNameAssignment_1(), "rule__FuncParam__NameAssignment_1");
					put(grammarAccess.getFuncDefinitionAccess().getTypeAssignment_1(), "rule__FuncDefinition__TypeAssignment_1");
					put(grammarAccess.getFuncDefinitionAccess().getNameAssignment_2(), "rule__FuncDefinition__NameAssignment_2");
					put(grammarAccess.getFuncDefinitionAccess().getParamsAssignment_4_0(), "rule__FuncDefinition__ParamsAssignment_4_0");
					put(grammarAccess.getFuncDefinitionAccess().getParamsAssignment_4_1_1(), "rule__FuncDefinition__ParamsAssignment_4_1_1");
					put(grammarAccess.getFuncDefinitionAccess().getBlkAssignment_6(), "rule__FuncDefinition__BlkAssignment_6");
					put(grammarAccess.getFuncBlockAccess().getStatementsAssignment_2(), "rule__FuncBlock__StatementsAssignment_2");
					put(grammarAccess.getFuncVarDeclarationAccess().getNameAssignment_1(), "rule__FuncVarDeclaration__NameAssignment_1");
					put(grammarAccess.getFuncVarDeclarationAccess().getValAssignment_3(), "rule__FuncVarDeclaration__ValAssignment_3");
					put(grammarAccess.getFuncVarAssignAccess().getVarAssignment_0(), "rule__FuncVarAssign__VarAssignment_0");
					put(grammarAccess.getFuncVarAssignAccess().getValAssignment_2(), "rule__FuncVarAssign__ValAssignment_2");
					put(grammarAccess.getFuncIfElseAccess().getTestAssignment_2(), "rule__FuncIfElse__TestAssignment_2");
					put(grammarAccess.getFuncIfElseAccess().getThenAssignment_4(), "rule__FuncIfElse__ThenAssignment_4");
					put(grammarAccess.getFuncIfElseAccess().getTestAssignment_5_3(), "rule__FuncIfElse__TestAssignment_5_3");
					put(grammarAccess.getFuncIfElseAccess().getThenAssignment_5_5(), "rule__FuncIfElse__ThenAssignment_5_5");
					put(grammarAccess.getFuncIfElseAccess().getElseBranchAssignment_6_1(), "rule__FuncIfElse__ElseBranchAssignment_6_1");
					put(grammarAccess.getFuncReturnAccess().getValAssignment_1(), "rule__FuncReturn__ValAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public GoatComponentsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GoatComponentsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
