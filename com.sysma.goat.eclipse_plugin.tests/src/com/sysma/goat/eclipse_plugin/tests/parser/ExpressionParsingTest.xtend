/*
 * generated by Xtext 2.12.0
 */
package com.sysma.goat.eclipse_plugin.tests.parser

import com.sysma.goat.eclipse_plugin.tests.GoatComponentsInjectorProvider
import com.google.inject.Inject
import com.sysma.goat.eclipse_plugin.goatComponents.Model
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import com.sysma.goat.eclipse_plugin.goatComponents.FuncReturn
import com.sysma.goat.eclipse_plugin.goatComponents.IntConstant
import com.sysma.goat.eclipse_plugin.goatComponents.StringConstant
import com.sysma.goat.eclipse_plugin.goatComponents.BoolConstant
import com.sysma.goat.eclipse_plugin.goatComponents.FunctionCall
import com.sysma.goat.eclipse_plugin.goatComponents.ComponentAttributeRef
import com.sysma.goat.eclipse_plugin.goatComponents.RecAttributeRef
import com.sysma.goat.eclipse_plugin.goatComponents.FuncParam
import com.sysma.goat.eclipse_plugin.goatComponents.FuncVarDeclaration
import com.sysma.goat.eclipse_plugin.goatComponents.Not
import com.sysma.goat.eclipse_plugin.goatComponents.MulOrDiv
import com.sysma.goat.eclipse_plugin.goatComponents.Plus
import com.sysma.goat.eclipse_plugin.goatComponents.Minus
import com.sysma.goat.eclipse_plugin.goatComponents.Comparison
import com.sysma.goat.eclipse_plugin.goatComponents.Equality
import com.sysma.goat.eclipse_plugin.goatComponents.And
import com.sysma.goat.eclipse_plugin.goatComponents.Or
import com.sysma.goat.eclipse_plugin.goatComponents.LocalVarRef
import com.sysma.goat.eclipse_plugin.goatComponents.LocalAttributeRef
import com.sysma.goat.eclipse_plugin.goatComponents.Concatenate

@RunWith(XtextRunner)
@InjectWith(GoatComponentsInjectorProvider)
class ExpressionParsingTest {
	@Inject
	ParseHelper<Model> parseHelper
	
	def private encapsulateExpression(CharSequence expr){
		val result = parseHelper.parse('''
			infrastructure infr
			
			function int ciao(int i, string s, bool b, int ii, string ss, bool bb){
				var j = 0
				return «expr»
			}
		''')
		Assert.assertNotNull(result)
		(result.functions.get(0).blk.statements.get(1) as FuncReturn).^val
	}
	
	// Constants 
	@Test
	def void intConstant() {
		val result = encapsulateExpression('''5''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof IntConstant)
		Assert.assertTrue((result as IntConstant).value == 5)
	}
	
	@Test
	def void stringConstant() {
		val result = encapsulateExpression('''"ciao"''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof StringConstant)
		Assert.assertTrue((result as StringConstant).value == "ciao")
	}
	
	@Test
	def void boolConstantTrue() {
		val result = encapsulateExpression('''true''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof BoolConstant)
		Assert.assertTrue((result as BoolConstant).value == "true")
	}
	
	@Test
	def void boolConstantFalse() {
		val result = encapsulateExpression('''false''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof BoolConstant)
		Assert.assertTrue((result as BoolConstant).value == "false")
	}
	
	def void componentAttribute() {
		val result = encapsulateExpression('''this.ca''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof ComponentAttributeRef)
		Assert.assertTrue((result as ComponentAttributeRef).attribute == "ca")
	}
	
	def void receiverAttribute() {
		val result = encapsulateExpression('''receiver.ra''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof RecAttributeRef)
		Assert.assertTrue((result as RecAttributeRef).attribute == "ra")
	}
	
	// Function call
	@Test
	def void functionCallWithArguments() {
		val result = encapsulateExpression('''ciao(1,"x",true,1,"x",false)''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof FunctionCall)
		Assert.assertTrue((result as FunctionCall).function.name == "ciao")
		Assert.assertTrue((result as FunctionCall).params.length == 6)
	}
	@Test
	def void functionCallWithoutArguments() {
		val result = encapsulateExpression('''ciao()''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof FunctionCall)
		Assert.assertTrue((result as FunctionCall).function.name == "ciao")
		Assert.assertTrue((result as FunctionCall).params.length == 0)
	}
	
	// LocalRef
	@Test
	def void localAttr() {
		val result = encapsulateExpression('''proc.attr''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof LocalAttributeRef)
		val ref = result as LocalAttributeRef
		Assert.assertTrue(ref.attribute == "attr")
	}
	
	@Test
	def void funcParam() {
		val result = encapsulateExpression('''i''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof LocalVarRef)
		val ref = (result as LocalVarRef).ref
		Assert.assertTrue(ref instanceof FuncParam)
		Assert.assertTrue((ref as FuncParam).name == "i")
	}
	
	@Test
	def void funcVar() {
		val result = encapsulateExpression('''j''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof LocalVarRef)
		val ref = (result as LocalVarRef).ref
		Assert.assertTrue(ref instanceof FuncVarDeclaration)
		Assert.assertTrue((ref as FuncVarDeclaration).name == "j")
	}
	
	// Primary
	
	@Test
	def void negation() {
		val result = encapsulateExpression('''!(b)''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof Not)
		Assert.assertNotNull((result as Not).expression)
	}
	
	@Test
	def void brackets() {
		val result = encapsulateExpression('''((5))''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof IntConstant)
		Assert.assertTrue((result as IntConstant).value == 5)
	}
	
	// MulOrDiv
	
	@Test
	def void mul() {
		val result = encapsulateExpression('''5 * i''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof MulOrDiv)
		val mul = result as MulOrDiv
		Assert.assertTrue(mul.left instanceof IntConstant)
		Assert.assertTrue(mul.right instanceof LocalVarRef)
		Assert.assertTrue(mul.op == "*")
	}
	
	@Test
	def void multiMulWithBracketsLeft() {
		val result = encapsulateExpression('''(5 * i) / 6''') //(5*i)/6
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof MulOrDiv)
		val div = result as MulOrDiv
		Assert.assertTrue(div.left instanceof MulOrDiv)
		Assert.assertTrue(div.right instanceof IntConstant)
		Assert.assertTrue(div.op == "/")
		val mul = div.left as MulOrDiv
		Assert.assertTrue(mul.left instanceof IntConstant)
		Assert.assertTrue(mul.right instanceof LocalVarRef)
		Assert.assertTrue(mul.op == "*")
	}
	
	@Test
	def void multiMulWithBracketsRight() {
		val result = encapsulateExpression('''6 / (5 * i)''') 
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof MulOrDiv)
		val div = result as MulOrDiv
		Assert.assertTrue(div.right instanceof MulOrDiv)
		Assert.assertTrue(div.left instanceof IntConstant)
		Assert.assertTrue(div.op == "/")
		val mul = div.right as MulOrDiv
		Assert.assertTrue(mul.left instanceof IntConstant)
		Assert.assertTrue(mul.right instanceof LocalVarRef)
		Assert.assertTrue(mul.op == "*")
	}
	
	// PlusOrMinus
	@Test
	def void plusInt() {
		val result = encapsulateExpression('''5 + i''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof Plus)
		val plus = result as Plus
		Assert.assertTrue(plus.left instanceof IntConstant)
		Assert.assertTrue(plus.right instanceof LocalVarRef)
	}
	
	@Test
	def void minus() {
		val result = encapsulateExpression('''5 - i''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof Minus)
		val plus = result as Minus
		Assert.assertTrue(plus.left instanceof IntConstant)
		Assert.assertTrue(plus.right instanceof LocalVarRef)
	}
	
	@Test
	def void concatString() {
		val result = encapsulateExpression('''"5" ++ "i"''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof Concatenate)
		val plus = result as Concatenate
		Assert.assertTrue(plus.left instanceof StringConstant)
		Assert.assertTrue(plus.right instanceof StringConstant)
	}
	
	@Test
	def void plusPrecedence() {
		val result = encapsulateExpression('''5 + i * 6''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof Plus)
		val plus = result as Plus
		Assert.assertTrue(plus.left instanceof IntConstant)
		Assert.assertTrue(plus.right instanceof MulOrDiv)
		val mul = plus.right as MulOrDiv
		Assert.assertTrue(mul.left instanceof LocalVarRef)
		Assert.assertTrue(mul.right instanceof IntConstant)
		Assert.assertTrue(mul.op == "*")
	}
	
	// Comparison
	@Test
	def void geq() {
		val result = encapsulateExpression('''5 >= 6''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof Comparison)
		val cmp = result as Comparison
		Assert.assertTrue(cmp.left instanceof IntConstant)
		Assert.assertTrue(cmp.right instanceof IntConstant)
		Assert.assertTrue(cmp.op == ">=")
	}
	
	@Test
	def void gt() {
		val result = encapsulateExpression('''5 > 6 + 3''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof Comparison)
		val cmp = result as Comparison
		Assert.assertTrue(cmp.left instanceof IntConstant)
		Assert.assertTrue(cmp.right instanceof Plus)
		Assert.assertTrue(cmp.op == ">")
	}
	
	@Test
	def void lt() {
		val result = encapsulateExpression('''5 * 8 < 6 + 3''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof Comparison)
		val cmp = result as Comparison
		Assert.assertTrue(cmp.left instanceof MulOrDiv)
		Assert.assertTrue(cmp.right instanceof Plus)
		Assert.assertTrue(cmp.op == "<")
	}
	
	@Test
	def void lte() {
		val result = encapsulateExpression('''5 <= 6''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof Comparison)
		val cmp = result as Comparison
		Assert.assertTrue(cmp.left instanceof IntConstant)
		Assert.assertTrue(cmp.right instanceof IntConstant)
		Assert.assertTrue(cmp.op == "<=")
	}
	
	// Equality
	@Test
	def void equalInt() {
		val result = encapsulateExpression('''5 == 6''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof Equality)
		val cmp = result as Equality
		Assert.assertTrue(cmp.left instanceof IntConstant)
		Assert.assertTrue(cmp.right instanceof IntConstant)
		Assert.assertTrue(cmp.op == "==")
	}
	
	@Test
	def void equalString() {
		val result = encapsulateExpression('''"5" == "6"''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof Equality)
		val cmp = result as Equality
		Assert.assertTrue(cmp.left instanceof StringConstant)
		Assert.assertTrue(cmp.right instanceof StringConstant)
		Assert.assertTrue(cmp.op == "==")
	}
	
	@Test
	def void equalBool() {
		val result = encapsulateExpression('''true == false''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof Equality)
		val cmp = result as Equality
		Assert.assertTrue(cmp.left instanceof BoolConstant)
		Assert.assertTrue(cmp.right instanceof BoolConstant)
		Assert.assertTrue(cmp.op == "==")
	}
	
	@Test
	def void comparisonStrongerThanEqual() {
		val result = encapsulateExpression('''i >= 9 == 5 < 6''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof Equality)
		val cmp = result as Equality
		Assert.assertTrue(cmp.left instanceof Comparison)
		Assert.assertTrue(cmp.right instanceof Comparison)
		Assert.assertTrue(cmp.op == "==")
	}
	
	@Test
	def void notEqual() {
		val result = encapsulateExpression('''i != 9''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof Equality)
		val cmp = result as Equality
		Assert.assertTrue(cmp.left instanceof LocalVarRef)
		Assert.assertTrue(cmp.right instanceof IntConstant)
		Assert.assertTrue(cmp.op == "!=")
	}
	
	// Bool operands
	@Test
	def void and() {
		val result = encapsulateExpression('''b && true''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof And)
		val cmp = result as And
		Assert.assertTrue(cmp.sub.get(0) instanceof LocalVarRef)
		Assert.assertTrue(cmp.sub.get(1) instanceof BoolConstant)
	}
	
	@Test
	def void or() {
		val result = encapsulateExpression('''b || true''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof Or)
		val cmp = result as Or
		Assert.assertTrue(cmp.sub.get(0) instanceof LocalVarRef)
		Assert.assertTrue(cmp.sub.get(1) instanceof BoolConstant)
	}
	
	@Test
	def void andStrongerThanOr() {
		val result = encapsulateExpression('''false && b || true && false''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result instanceof Or)
		val cmp = result as Or
		Assert.assertTrue(cmp.sub.get(0) instanceof And)
		Assert.assertTrue(cmp.sub.get(1) instanceof And)
	}
}