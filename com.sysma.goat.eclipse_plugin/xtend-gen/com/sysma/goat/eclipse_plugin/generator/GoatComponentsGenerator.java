/**
 * generated by Xtext 2.12.0
 */
package com.sysma.goat.eclipse_plugin.generator;

import com.google.common.collect.Iterables;
import com.sysma.goat.eclipse_plugin.generator.CodeModel;
import com.sysma.goat.eclipse_plugin.generator.CommandLineContext;
import com.sysma.goat.eclipse_plugin.goatComponents.Model;
import org.eclipse.core.runtime.Path;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class GoatComponentsGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    this.doGenerateInt(resource, fsa, context);
  }
  
  public void doGenerateInt(final Resource resource, final IFileSystemAccess fsa, final IGeneratorContext context) {
    Iterable<Model> _filter = Iterables.<Model>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Model.class);
    for (final Model model : _filter) {
      {
        final CodeModel c_model = new CodeModel(model);
        String _xifexpression = null;
        if ((context instanceof CommandLineContext)) {
          String _fileString = resource.getURI().toFileString();
          Path _path = new Path(_fileString);
          int _segmentCount = ((CommandLineContext)context).projectPath.segmentCount();
          int _plus = (_segmentCount + 1);
          _xifexpression = new Path("component").append(
            _path.removeFirstSegments(_plus).removeFileExtension().addFileExtension("go")).toString();
        } else {
          String _platformString = resource.getURI().toPlatformString(true);
          _xifexpression = new Path("component").append(
            new Path(_platformString).removeFirstSegments(2).removeFileExtension().addFileExtension("go")).toString();
        }
        final String goFileName = _xifexpression;
        fsa.generateFile(goFileName, c_model.getCode());
      }
    }
  }
}
