/**
 * generated by Xtext 2.12.0
 */
package com.sysma.goat.eclipse_plugin.generator;

import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;
import com.sysma.goat.eclipse_plugin.GoatComponentsStandaloneSetup;
import com.sysma.goat.eclipse_plugin.generator.CommandLineContext;
import java.io.File;
import java.io.IOException;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.List;
import java.util.function.Consumer;
import org.eclipse.core.runtime.Path;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.generator.GeneratorDelegate;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Exceptions;

@SuppressWarnings("all")
public class Main {
  public static void main(final String[] args) {
    try {
      boolean _isEmpty = ((List<String>)Conversions.doWrapArray(args)).isEmpty();
      if (_isEmpty) {
        System.err.println("Aborting: no path to EMF resource provided!");
        return;
      }
      final Injector injector = new GoatComponentsStandaloneSetup().createInjectorAndDoEMFRegistration();
      final Main main = injector.<Main>getInstance(Main.class);
      String _get = args[0];
      String _string = new File(_get).getAbsoluteFile().toString();
      final Path projectPath = new Path(_string);
      java.nio.file.Path _path = projectPath.append("src").toFile().toPath();
      Files.walkFileTree(_path, new SimpleFileVisitor<java.nio.file.Path>() {
        @Override
        public FileVisitResult visitFile(final java.nio.file.Path file, final BasicFileAttributes attrs) throws IOException {
          if (((!attrs.isDirectory()) && file.toString().endsWith(".goat"))) {
            main.runGenerator(file.toString(), projectPath);
          }
          return FileVisitResult.CONTINUE;
        }
      });
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Inject
  private Provider<ResourceSet> resourceSetProvider;
  
  @Inject
  private IResourceValidator validator;
  
  @Inject
  private GeneratorDelegate generator;
  
  @Inject
  private JavaIoFileSystemAccess fileAccess;
  
  protected void runGenerator(final String string, final Path projectPath) {
    final ResourceSet set = this.resourceSetProvider.get();
    final Resource resource = set.getResource(URI.createFileURI(string), true);
    final List<Issue> issues = this.validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
    boolean _isEmpty = issues.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      final Consumer<Issue> _function = (Issue it) -> {
        System.err.println(it);
      };
      issues.forEach(_function);
      return;
    }
    this.fileAccess.setOutputPath(projectPath.append("src-gen").toString());
    String _string = projectPath.toString();
    final CommandLineContext context = new CommandLineContext(_string);
    this.generator.generate(resource, this.fileAccess, context);
    System.out.println("Code generation finished.");
  }
}
