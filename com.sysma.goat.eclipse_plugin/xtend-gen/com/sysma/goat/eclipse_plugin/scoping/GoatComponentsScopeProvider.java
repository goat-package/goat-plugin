/**
 * generated by Xtext 2.12.0
 */
package com.sysma.goat.eclipse_plugin.scoping;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.sysma.goat.eclipse_plugin.goatComponents.Expression;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncBlock;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncDefinition;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncStatement;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncVarDeclaration;
import com.sysma.goat.eclipse_plugin.goatComponents.GoatComponentsPackage;
import com.sysma.goat.eclipse_plugin.goatComponents.Model;
import com.sysma.goat.eclipse_plugin.scoping.AbstractGoatComponentsScopeProvider;
import java.util.Collections;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class GoatComponentsScopeProvider extends AbstractGoatComponentsScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _switchResult = null;
    boolean _matched = false;
    EReference _processCall_Proc = GoatComponentsPackage.eINSTANCE.getProcessCall_Proc();
    if (Objects.equal(reference, _processCall_Proc)) {
      _matched=true;
    }
    if (!_matched) {
      EReference _processSpawn_Proc = GoatComponentsPackage.eINSTANCE.getProcessSpawn_Proc();
      if (Objects.equal(reference, _processSpawn_Proc)) {
        _matched=true;
      }
    }
    if (_matched) {
      _switchResult = this.scopeForProcessDefinition(context);
    }
    if (!_matched) {
      EReference _localVarRef_Ref = GoatComponentsPackage.eINSTANCE.getLocalVarRef_Ref();
      if (Objects.equal(reference, _localVarRef_Ref)) {
        _matched=true;
        _switchResult = this.scopeForFuncVarParam(context);
      }
    }
    if (!_matched) {
      _switchResult = super.getScope(context, reference);
    }
    return _switchResult;
  }
  
  public IScope scopeForProcessDefinition(final EObject context) {
    IScope _xblockexpression = null;
    {
      EObject container = context;
      while (((container != null) && (!(container instanceof Model)))) {
        container = container.eContainer();
      }
      IScope _xifexpression = null;
      if ((container == null)) {
        _xifexpression = IScope.NULLSCOPE;
      } else {
        _xifexpression = Scopes.scopeFor(((Model) container).getProcesses());
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public IScope scopeForFuncVarParam(final EObject context) {
    IScope _xblockexpression = null;
    {
      final EObject container = context.eContainer();
      IScope _switchResult = null;
      boolean _matched = false;
      if (container instanceof FuncDefinition) {
        _matched=true;
        _switchResult = Scopes.scopeFor(((FuncDefinition)container).getParams());
      }
      if (!_matched) {
        if (container instanceof FuncBlock) {
          _matched=true;
          final Function1<FuncStatement, Boolean> _function = (FuncStatement it) -> {
            return Boolean.valueOf((!Objects.equal(it, context)));
          };
          _switchResult = Scopes.scopeFor(Iterables.<FuncVarDeclaration>filter(IterableExtensions.<FuncStatement>takeWhile(((FuncBlock)container).getStatements(), _function), FuncVarDeclaration.class), this.scopeForFuncVarParam(container));
        }
      }
      if (!_matched) {
        if (container instanceof FuncStatement) {
          _matched=true;
        }
        if (!_matched) {
          if (container instanceof Expression) {
            _matched=true;
          }
        }
        if (_matched) {
          _switchResult = this.scopeForFuncVarParam(container);
        }
      }
      if (!_matched) {
        _switchResult = Scopes.scopeFor(Collections.<EObject>unmodifiableList(CollectionLiterals.<EObject>newArrayList()));
      }
      _xblockexpression = _switchResult;
    }
    return _xblockexpression;
  }
}
