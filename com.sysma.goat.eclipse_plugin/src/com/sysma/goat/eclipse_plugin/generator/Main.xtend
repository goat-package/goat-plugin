/*
 * generated by Xtext 2.12.0
 */
package com.sysma.goat.eclipse_plugin.generator

import com.google.inject.Inject
import com.google.inject.Provider
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.xtext.generator.GeneratorDelegate
import org.eclipse.xtext.generator.JavaIoFileSystemAccess
import org.eclipse.xtext.util.CancelIndicator
import org.eclipse.xtext.validation.CheckMode
import org.eclipse.xtext.validation.IResourceValidator
import org.eclipse.core.runtime.Path
import java.nio.file.Files
import java.nio.file.SimpleFileVisitor
import java.io.File
import java.nio.file.attribute.BasicFileAttributes
import java.io.IOException
import java.nio.file.FileVisitResult
import com.sysma.goat.eclipse_plugin.GoatComponentsStandaloneSetup

class Main {

	def static main(String[] args) {
		if (args.empty) {
			System::err.println('Aborting: no path to EMF resource provided!')
			return
		}
		val injector = new GoatComponentsStandaloneSetup().createInjectorAndDoEMFRegistration
		val main = injector.getInstance(Main)
		val projectPath = new Path(new File(args.get(0)).absoluteFile.toString)
		
		Files.walkFileTree(projectPath.append("src").toFile.toPath, new SimpleFileVisitor<java.nio.file.Path>(){
			override visitFile(java.nio.file.Path file, BasicFileAttributes attrs) throws IOException {
		          if(!attrs.isDirectory() && file.toString.endsWith(".goat")){
		               main.runGenerator(file.toString, projectPath)
		          }
		          return FileVisitResult.CONTINUE;
		      }
		});
		
		
	}

	@Inject Provider<ResourceSet> resourceSetProvider

	@Inject IResourceValidator validator

	@Inject GeneratorDelegate generator

	@Inject JavaIoFileSystemAccess fileAccess

	def protected runGenerator(String string, Path projectPath) {
		// Load the resource
		val set = resourceSetProvider.get
		val resource = set.getResource(URI.createFileURI(string), true)

		// Validate the resource
		val issues = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl)
		if (!issues.empty) {
			issues.forEach[System.err.println(it)]
			return
		}

		// Configure and start the generator
		fileAccess.outputPath = projectPath.append('src-gen').toString
		val context = new CommandLineContext(projectPath.toString)
		generator.generate(resource, fileAccess, context)
		System.out.println('Code generation finished.')
	}
}
