/*
 * generated by Xtext 2.12.0
 */
package com.sysma.goat.eclipse_plugin.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import com.sysma.goat.eclipse_plugin.goatComponents.Model
import org.eclipse.core.runtime.Path
import org.eclipse.xtext.generator.IFileSystemAccess

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class GoatComponentsGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		doGenerateInt(resource, fsa, context)
	}
	
	def void doGenerateInt(Resource resource, IFileSystemAccess fsa, IGeneratorContext context) {
		for(model:(resource.allContents.toIterable.filter(Model))){
			val c_model = new CodeModel(model)
			val goFileName =
				if (context instanceof CommandLineContext){
					new Path("component").append(
						new Path(resource.URI.toFileString)
						.removeFirstSegments(context.projectPath.segmentCount +1)
						.removeFileExtension
						.addFileExtension("go")
					).toString
				} else {
					new Path("component").append(
						new Path(resource.URI.toPlatformString(true))
						.removeFirstSegments(2)
						.removeFileExtension
						.addFileExtension("go")
					).toString
				}
			// EcorePlatformUtil.getFile(resource)
			fsa.generateFile(goFileName, c_model.code)
		}
	}
}
