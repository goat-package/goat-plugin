/*
 * generated by Xtext 2.12.0
 */
package com.sysma.goat.eclipse_plugin.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import com.sysma.goat.eclipse_plugin.goatInfrastructure.SingleServer
import org.eclipse.core.runtime.Path
import com.sysma.goat.eclipse_plugin.goatInfrastructure.Cluster
import com.sysma.goat.eclipse_plugin.goatInfrastructure.Ring
import com.sysma.goat.eclipse_plugin.goatInfrastructure.Tree
import com.sysma.goat.eclipse_plugin.goatInfrastructure.Infrastructure
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.xtext.generator.IFileSystemAccess

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class GoatInfrastructureGenerator extends AbstractGenerator implements IGeneratorMulti {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		doGenerateInt(resource, fsa, context)
	}
	def void doGenerateInt(Resource resource, IFileSystemAccess fsa, IGeneratorContext context) {
		for(infr: resource.allContents.toIterable.filter[it instanceof Infrastructure]){
			val code = switch(infr){
				SingleServer:
					new CodeSingleServer(infr)
				Cluster:
					new CodeCluster(infr)
				Ring:
					new CodeRing(infr)
				Tree:
					new CodeTree(infr)
				default:
					null as CodeInfrastructure
			}
				
			val goFileName = new Path("infrastructure").append(
					new Path(resource.URI.toPlatformString(true))
					.removeFirstSegments(2)
					.removeFileExtension
					.addFileExtension("go")
				).toString
			// EcorePlatformUtil.getFile(resource)
			fsa.generateFile(goFileName, code.code)
		}
	}
	
	override doGenerate(ResourceSet input, IFileSystemAccess fsa) {
		val goatGen = new GoatComponentsGenerator()
		input.resources.forEach[
			doGenerate(it, fsa)
			goatGen.doGenerateInt(it, fsa, null)
		]
	}
	
	override doGenerate(Resource input, IFileSystemAccess fsa) {
		doGenerateInt(input, fsa, null)
	}
	
}
