/*
 * generated by Xtext 2.12.0
 */
package com.sysma.goat.eclipse_plugin.serializer;

import com.google.inject.Inject;
import com.sysma.goat.eclipse_plugin.goatInfrastructure.Cluster;
import com.sysma.goat.eclipse_plugin.goatInfrastructure.GoatInfrastructurePackage;
import com.sysma.goat.eclipse_plugin.goatInfrastructure.Ring;
import com.sysma.goat.eclipse_plugin.goatInfrastructure.SingleServer;
import com.sysma.goat.eclipse_plugin.goatInfrastructure.Tree;
import com.sysma.goat.eclipse_plugin.goatInfrastructure.TreeNode;
import com.sysma.goat.eclipse_plugin.services.GoatInfrastructureGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class GoatInfrastructureSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GoatInfrastructureGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GoatInfrastructurePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GoatInfrastructurePackage.CLUSTER:
				sequence_Cluster(context, (Cluster) semanticObject); 
				return; 
			case GoatInfrastructurePackage.RING:
				sequence_Ring(context, (Ring) semanticObject); 
				return; 
			case GoatInfrastructurePackage.SINGLE_SERVER:
				sequence_SingleServer(context, (SingleServer) semanticObject); 
				return; 
			case GoatInfrastructurePackage.TREE:
				sequence_Tree(context, (Tree) semanticObject); 
				return; 
			case GoatInfrastructurePackage.TREE_NODE:
				sequence_TreeNode(context, (TreeNode) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Infrastructure returns Cluster
	 *     Cluster returns Cluster
	 *
	 * Constraint:
	 *     ((name=ID message_queue=STRING) | registration=STRING | mid_assigner=STRING | (nodes+=STRING nodes+=STRING*))+
	 */
	protected void sequence_Cluster(ISerializationContext context, Cluster semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Infrastructure returns Ring
	 *     Ring returns Ring
	 *
	 * Constraint:
	 *     ((name=ID registration=STRING) | mid_assigner=STRING | (nodes+=STRING nodes+=STRING*))+
	 */
	protected void sequence_Ring(ISerializationContext context, Ring semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Infrastructure returns SingleServer
	 *     SingleServer returns SingleServer
	 *
	 * Constraint:
	 *     (timeout=INT? (name=ID server=STRING)?)+
	 */
	protected void sequence_SingleServer(ISerializationContext context, SingleServer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TreeNode returns TreeNode
	 *
	 * Constraint:
	 *     (address=STRING (children+=TreeNode children+=TreeNode*)?)
	 */
	protected void sequence_TreeNode(ISerializationContext context, TreeNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Infrastructure returns Tree
	 *     Tree returns Tree
	 *
	 * Constraint:
	 *     ((name=ID registration=STRING) | root=TreeNode)+
	 */
	protected void sequence_Tree(ISerializationContext context, Tree semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
