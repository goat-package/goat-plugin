/**
 * generated by Xtext 2.12.0
 */
package com.sysma.goat.eclipse_plugin.goatComponents.impl;

import com.sysma.goat.eclipse_plugin.goatComponents.Expression;
import com.sysma.goat.eclipse_plugin.goatComponents.GoatComponentsPackage;
import com.sysma.goat.eclipse_plugin.goatComponents.PrintStatement;
import com.sysma.goat.eclipse_plugin.goatComponents.ProcessSend;
import com.sysma.goat.eclipse_plugin.goatComponents.Update;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Process Send</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.sysma.goat.eclipse_plugin.goatComponents.impl.ProcessSendImpl#getMsgOutParts <em>Msg Out Parts</em>}</li>
 *   <li>{@link com.sysma.goat.eclipse_plugin.goatComponents.impl.ProcessSendImpl#getSend_pred <em>Send pred</em>}</li>
 *   <li>{@link com.sysma.goat.eclipse_plugin.goatComponents.impl.ProcessSendImpl#getUpdates <em>Updates</em>}</li>
 *   <li>{@link com.sysma.goat.eclipse_plugin.goatComponents.impl.ProcessSendImpl#getPrint <em>Print</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ProcessSendImpl extends ProcessStatementImpl implements ProcessSend
{
  /**
   * The cached value of the '{@link #getMsgOutParts() <em>Msg Out Parts</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMsgOutParts()
   * @generated
   * @ordered
   */
  protected EList<Expression> msgOutParts;

  /**
   * The cached value of the '{@link #getSend_pred() <em>Send pred</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSend_pred()
   * @generated
   * @ordered
   */
  protected Expression send_pred;

  /**
   * The cached value of the '{@link #getUpdates() <em>Updates</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUpdates()
   * @generated
   * @ordered
   */
  protected Update updates;

  /**
   * The cached value of the '{@link #getPrint() <em>Print</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrint()
   * @generated
   * @ordered
   */
  protected PrintStatement print;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProcessSendImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoatComponentsPackage.Literals.PROCESS_SEND;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Expression> getMsgOutParts()
  {
    if (msgOutParts == null)
    {
      msgOutParts = new EObjectContainmentEList<Expression>(Expression.class, this, GoatComponentsPackage.PROCESS_SEND__MSG_OUT_PARTS);
    }
    return msgOutParts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getSend_pred()
  {
    return send_pred;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSend_pred(Expression newSend_pred, NotificationChain msgs)
  {
    Expression oldSend_pred = send_pred;
    send_pred = newSend_pred;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoatComponentsPackage.PROCESS_SEND__SEND_PRED, oldSend_pred, newSend_pred);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSend_pred(Expression newSend_pred)
  {
    if (newSend_pred != send_pred)
    {
      NotificationChain msgs = null;
      if (send_pred != null)
        msgs = ((InternalEObject)send_pred).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoatComponentsPackage.PROCESS_SEND__SEND_PRED, null, msgs);
      if (newSend_pred != null)
        msgs = ((InternalEObject)newSend_pred).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoatComponentsPackage.PROCESS_SEND__SEND_PRED, null, msgs);
      msgs = basicSetSend_pred(newSend_pred, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoatComponentsPackage.PROCESS_SEND__SEND_PRED, newSend_pred, newSend_pred));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Update getUpdates()
  {
    return updates;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUpdates(Update newUpdates, NotificationChain msgs)
  {
    Update oldUpdates = updates;
    updates = newUpdates;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoatComponentsPackage.PROCESS_SEND__UPDATES, oldUpdates, newUpdates);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUpdates(Update newUpdates)
  {
    if (newUpdates != updates)
    {
      NotificationChain msgs = null;
      if (updates != null)
        msgs = ((InternalEObject)updates).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoatComponentsPackage.PROCESS_SEND__UPDATES, null, msgs);
      if (newUpdates != null)
        msgs = ((InternalEObject)newUpdates).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoatComponentsPackage.PROCESS_SEND__UPDATES, null, msgs);
      msgs = basicSetUpdates(newUpdates, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoatComponentsPackage.PROCESS_SEND__UPDATES, newUpdates, newUpdates));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrintStatement getPrint()
  {
    return print;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPrint(PrintStatement newPrint, NotificationChain msgs)
  {
    PrintStatement oldPrint = print;
    print = newPrint;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoatComponentsPackage.PROCESS_SEND__PRINT, oldPrint, newPrint);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPrint(PrintStatement newPrint)
  {
    if (newPrint != print)
    {
      NotificationChain msgs = null;
      if (print != null)
        msgs = ((InternalEObject)print).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoatComponentsPackage.PROCESS_SEND__PRINT, null, msgs);
      if (newPrint != null)
        msgs = ((InternalEObject)newPrint).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoatComponentsPackage.PROCESS_SEND__PRINT, null, msgs);
      msgs = basicSetPrint(newPrint, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoatComponentsPackage.PROCESS_SEND__PRINT, newPrint, newPrint));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoatComponentsPackage.PROCESS_SEND__MSG_OUT_PARTS:
        return ((InternalEList<?>)getMsgOutParts()).basicRemove(otherEnd, msgs);
      case GoatComponentsPackage.PROCESS_SEND__SEND_PRED:
        return basicSetSend_pred(null, msgs);
      case GoatComponentsPackage.PROCESS_SEND__UPDATES:
        return basicSetUpdates(null, msgs);
      case GoatComponentsPackage.PROCESS_SEND__PRINT:
        return basicSetPrint(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoatComponentsPackage.PROCESS_SEND__MSG_OUT_PARTS:
        return getMsgOutParts();
      case GoatComponentsPackage.PROCESS_SEND__SEND_PRED:
        return getSend_pred();
      case GoatComponentsPackage.PROCESS_SEND__UPDATES:
        return getUpdates();
      case GoatComponentsPackage.PROCESS_SEND__PRINT:
        return getPrint();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoatComponentsPackage.PROCESS_SEND__MSG_OUT_PARTS:
        getMsgOutParts().clear();
        getMsgOutParts().addAll((Collection<? extends Expression>)newValue);
        return;
      case GoatComponentsPackage.PROCESS_SEND__SEND_PRED:
        setSend_pred((Expression)newValue);
        return;
      case GoatComponentsPackage.PROCESS_SEND__UPDATES:
        setUpdates((Update)newValue);
        return;
      case GoatComponentsPackage.PROCESS_SEND__PRINT:
        setPrint((PrintStatement)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoatComponentsPackage.PROCESS_SEND__MSG_OUT_PARTS:
        getMsgOutParts().clear();
        return;
      case GoatComponentsPackage.PROCESS_SEND__SEND_PRED:
        setSend_pred((Expression)null);
        return;
      case GoatComponentsPackage.PROCESS_SEND__UPDATES:
        setUpdates((Update)null);
        return;
      case GoatComponentsPackage.PROCESS_SEND__PRINT:
        setPrint((PrintStatement)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoatComponentsPackage.PROCESS_SEND__MSG_OUT_PARTS:
        return msgOutParts != null && !msgOutParts.isEmpty();
      case GoatComponentsPackage.PROCESS_SEND__SEND_PRED:
        return send_pred != null;
      case GoatComponentsPackage.PROCESS_SEND__UPDATES:
        return updates != null;
      case GoatComponentsPackage.PROCESS_SEND__PRINT:
        return print != null;
    }
    return super.eIsSet(featureID);
  }

} //ProcessSendImpl
