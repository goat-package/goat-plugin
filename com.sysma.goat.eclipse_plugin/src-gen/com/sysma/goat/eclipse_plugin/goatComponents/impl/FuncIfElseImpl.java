/**
 * generated by Xtext 2.12.0
 */
package com.sysma.goat.eclipse_plugin.goatComponents.impl;

import com.sysma.goat.eclipse_plugin.goatComponents.Expression;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncBlock;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncIfElse;
import com.sysma.goat.eclipse_plugin.goatComponents.GoatComponentsPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Func If Else</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.sysma.goat.eclipse_plugin.goatComponents.impl.FuncIfElseImpl#getTest <em>Test</em>}</li>
 *   <li>{@link com.sysma.goat.eclipse_plugin.goatComponents.impl.FuncIfElseImpl#getThen <em>Then</em>}</li>
 *   <li>{@link com.sysma.goat.eclipse_plugin.goatComponents.impl.FuncIfElseImpl#getElseBranch <em>Else Branch</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FuncIfElseImpl extends FuncStatementImpl implements FuncIfElse
{
  /**
   * The cached value of the '{@link #getTest() <em>Test</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTest()
   * @generated
   * @ordered
   */
  protected EList<Expression> test;

  /**
   * The cached value of the '{@link #getThen() <em>Then</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThen()
   * @generated
   * @ordered
   */
  protected EList<FuncBlock> then;

  /**
   * The cached value of the '{@link #getElseBranch() <em>Else Branch</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElseBranch()
   * @generated
   * @ordered
   */
  protected FuncBlock elseBranch;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FuncIfElseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoatComponentsPackage.Literals.FUNC_IF_ELSE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Expression> getTest()
  {
    if (test == null)
    {
      test = new EObjectContainmentEList<Expression>(Expression.class, this, GoatComponentsPackage.FUNC_IF_ELSE__TEST);
    }
    return test;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<FuncBlock> getThen()
  {
    if (then == null)
    {
      then = new EObjectContainmentEList<FuncBlock>(FuncBlock.class, this, GoatComponentsPackage.FUNC_IF_ELSE__THEN);
    }
    return then;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FuncBlock getElseBranch()
  {
    return elseBranch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElseBranch(FuncBlock newElseBranch, NotificationChain msgs)
  {
    FuncBlock oldElseBranch = elseBranch;
    elseBranch = newElseBranch;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoatComponentsPackage.FUNC_IF_ELSE__ELSE_BRANCH, oldElseBranch, newElseBranch);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setElseBranch(FuncBlock newElseBranch)
  {
    if (newElseBranch != elseBranch)
    {
      NotificationChain msgs = null;
      if (elseBranch != null)
        msgs = ((InternalEObject)elseBranch).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoatComponentsPackage.FUNC_IF_ELSE__ELSE_BRANCH, null, msgs);
      if (newElseBranch != null)
        msgs = ((InternalEObject)newElseBranch).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoatComponentsPackage.FUNC_IF_ELSE__ELSE_BRANCH, null, msgs);
      msgs = basicSetElseBranch(newElseBranch, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoatComponentsPackage.FUNC_IF_ELSE__ELSE_BRANCH, newElseBranch, newElseBranch));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoatComponentsPackage.FUNC_IF_ELSE__TEST:
        return ((InternalEList<?>)getTest()).basicRemove(otherEnd, msgs);
      case GoatComponentsPackage.FUNC_IF_ELSE__THEN:
        return ((InternalEList<?>)getThen()).basicRemove(otherEnd, msgs);
      case GoatComponentsPackage.FUNC_IF_ELSE__ELSE_BRANCH:
        return basicSetElseBranch(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoatComponentsPackage.FUNC_IF_ELSE__TEST:
        return getTest();
      case GoatComponentsPackage.FUNC_IF_ELSE__THEN:
        return getThen();
      case GoatComponentsPackage.FUNC_IF_ELSE__ELSE_BRANCH:
        return getElseBranch();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoatComponentsPackage.FUNC_IF_ELSE__TEST:
        getTest().clear();
        getTest().addAll((Collection<? extends Expression>)newValue);
        return;
      case GoatComponentsPackage.FUNC_IF_ELSE__THEN:
        getThen().clear();
        getThen().addAll((Collection<? extends FuncBlock>)newValue);
        return;
      case GoatComponentsPackage.FUNC_IF_ELSE__ELSE_BRANCH:
        setElseBranch((FuncBlock)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoatComponentsPackage.FUNC_IF_ELSE__TEST:
        getTest().clear();
        return;
      case GoatComponentsPackage.FUNC_IF_ELSE__THEN:
        getThen().clear();
        return;
      case GoatComponentsPackage.FUNC_IF_ELSE__ELSE_BRANCH:
        setElseBranch((FuncBlock)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoatComponentsPackage.FUNC_IF_ELSE__TEST:
        return test != null && !test.isEmpty();
      case GoatComponentsPackage.FUNC_IF_ELSE__THEN:
        return then != null && !then.isEmpty();
      case GoatComponentsPackage.FUNC_IF_ELSE__ELSE_BRANCH:
        return elseBranch != null;
    }
    return super.eIsSet(featureID);
  }

} //FuncIfElseImpl
