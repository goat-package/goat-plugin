/*
 * generated by Xtext 2.12.0
 */
package com.sysma.goat.eclipse_plugin.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GoatComponentsGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInfrastructureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInfrastructureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cInfrastructureInfrastructureCrossReference_2_0 = (CrossReference)cInfrastructureAssignment_2.eContents().get(0);
		private final RuleCall cInfrastructureInfrastructureIDTerminalRuleCall_2_0_1 = (RuleCall)cInfrastructureInfrastructureCrossReference_2_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cProcessesAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cProcessesProcessDefinitionParserRuleCall_3_0_0 = (RuleCall)cProcessesAssignment_3_0.eContents().get(0);
		private final Assignment cComponentsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cComponentsComponentDefinitionParserRuleCall_3_1_0 = (RuleCall)cComponentsAssignment_3_1.eContents().get(0);
		private final Assignment cFunctionsAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cFunctionsFuncDefinitionParserRuleCall_3_2_0 = (RuleCall)cFunctionsAssignment_3_2.eContents().get(0);
		private final Assignment cEnvironmentsAssignment_3_3 = (Assignment)cAlternatives_3.eContents().get(3);
		private final RuleCall cEnvironmentsEnvironmentDefinitionParserRuleCall_3_3_0 = (RuleCall)cEnvironmentsAssignment_3_3.eContents().get(0);
		
		//Model:
		//	{Model}
		//	'infrastructure' infrastructure=[infr::Infrastructure] (processes+=ProcessDefinition | components+=ComponentDefinition
		//	| functions+=FuncDefinition | environments+=EnvironmentDefinition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Model} 'infrastructure' infrastructure=[infr::Infrastructure] (processes+=ProcessDefinition |
		//components+=ComponentDefinition | functions+=FuncDefinition | environments+=EnvironmentDefinition)*
		public Group getGroup() { return cGroup; }
		
		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }
		
		//'infrastructure'
		public Keyword getInfrastructureKeyword_1() { return cInfrastructureKeyword_1; }
		
		//infrastructure=[infr::Infrastructure]
		public Assignment getInfrastructureAssignment_2() { return cInfrastructureAssignment_2; }
		
		//[infr::Infrastructure]
		public CrossReference getInfrastructureInfrastructureCrossReference_2_0() { return cInfrastructureInfrastructureCrossReference_2_0; }
		
		//ID
		public RuleCall getInfrastructureInfrastructureIDTerminalRuleCall_2_0_1() { return cInfrastructureInfrastructureIDTerminalRuleCall_2_0_1; }
		
		//(processes+=ProcessDefinition | components+=ComponentDefinition | functions+=FuncDefinition |
		//environments+=EnvironmentDefinition)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//processes+=ProcessDefinition
		public Assignment getProcessesAssignment_3_0() { return cProcessesAssignment_3_0; }
		
		//ProcessDefinition
		public RuleCall getProcessesProcessDefinitionParserRuleCall_3_0_0() { return cProcessesProcessDefinitionParserRuleCall_3_0_0; }
		
		//components+=ComponentDefinition
		public Assignment getComponentsAssignment_3_1() { return cComponentsAssignment_3_1; }
		
		//ComponentDefinition
		public RuleCall getComponentsComponentDefinitionParserRuleCall_3_1_0() { return cComponentsComponentDefinitionParserRuleCall_3_1_0; }
		
		//functions+=FuncDefinition
		public Assignment getFunctionsAssignment_3_2() { return cFunctionsAssignment_3_2; }
		
		//FuncDefinition
		public RuleCall getFunctionsFuncDefinitionParserRuleCall_3_2_0() { return cFunctionsFuncDefinitionParserRuleCall_3_2_0; }
		
		//environments+=EnvironmentDefinition
		public Assignment getEnvironmentsAssignment_3_3() { return cEnvironmentsAssignment_3_3; }
		
		//EnvironmentDefinition
		public RuleCall getEnvironmentsEnvironmentDefinitionParserRuleCall_3_3_0() { return cEnvironmentsEnvironmentDefinitionParserRuleCall_3_3_0; }
	}
	public class ProcessDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.ProcessDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cBlockAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cBlockPDPBlockParserRuleCall_2_0_1_0 = (RuleCall)cBlockAssignment_2_0_1.eContents().get(0);
		private final Assignment cBlockAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cBlockProcessBlockParserRuleCall_2_1_0 = (RuleCall)cBlockAssignment_2_1.eContents().get(0);
		
		////Process
		//ProcessDefinition:
		//	'process' name=ID ('=' block=PDPBlock | block=ProcessBlock);
		@Override public ParserRule getRule() { return rule; }
		
		//'process' name=ID ('=' block=PDPBlock | block=ProcessBlock)
		public Group getGroup() { return cGroup; }
		
		//'process'
		public Keyword getProcessKeyword_0() { return cProcessKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'=' block=PDPBlock | block=ProcessBlock
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'=' block=PDPBlock
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0_0() { return cEqualsSignKeyword_2_0_0; }
		
		//block=PDPBlock
		public Assignment getBlockAssignment_2_0_1() { return cBlockAssignment_2_0_1; }
		
		//PDPBlock
		public RuleCall getBlockPDPBlockParserRuleCall_2_0_1_0() { return cBlockPDPBlockParserRuleCall_2_0_1_0; }
		
		//block=ProcessBlock
		public Assignment getBlockAssignment_2_1() { return cBlockAssignment_2_1; }
		
		//ProcessBlock
		public RuleCall getBlockProcessBlockParserRuleCall_2_1_0() { return cBlockProcessBlockParserRuleCall_2_1_0; }
	}
	public class PDPBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.PDPBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cStatementsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cStatementsPDPSpawnParserRuleCall_0_0_0 = (RuleCall)cStatementsAssignment_0_0.eContents().get(0);
		private final Keyword cVerticalLineKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsPDPCallParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		
		//PDPBlock ProcessBlock:
		//	(statements+=PDPSpawn "|")* statements+=PDPCall;
		@Override public ParserRule getRule() { return rule; }
		
		//(statements+=PDPSpawn "|")* statements+=PDPCall
		public Group getGroup() { return cGroup; }
		
		//(statements+=PDPSpawn "|")*
		public Group getGroup_0() { return cGroup_0; }
		
		//statements+=PDPSpawn
		public Assignment getStatementsAssignment_0_0() { return cStatementsAssignment_0_0; }
		
		//PDPSpawn
		public RuleCall getStatementsPDPSpawnParserRuleCall_0_0_0() { return cStatementsPDPSpawnParserRuleCall_0_0_0; }
		
		//"|"
		public Keyword getVerticalLineKeyword_0_1() { return cVerticalLineKeyword_0_1; }
		
		//statements+=PDPCall
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }
		
		//PDPCall
		public RuleCall getStatementsPDPCallParserRuleCall_1_0() { return cStatementsPDPCallParserRuleCall_1_0; }
	}
	public class PDPSpawnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.PDPSpawn");
		private final Assignment cProcAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cProcProcessDefinitionCrossReference_0 = (CrossReference)cProcAssignment.eContents().get(0);
		private final RuleCall cProcProcessDefinitionIDTerminalRuleCall_0_1 = (RuleCall)cProcProcessDefinitionCrossReference_0.eContents().get(1);
		
		//PDPSpawn ProcessSpawn:
		//	proc=[ProcessDefinition];
		@Override public ParserRule getRule() { return rule; }
		
		//proc=[ProcessDefinition]
		public Assignment getProcAssignment() { return cProcAssignment; }
		
		//[ProcessDefinition]
		public CrossReference getProcProcessDefinitionCrossReference_0() { return cProcProcessDefinitionCrossReference_0; }
		
		//ID
		public RuleCall getProcProcessDefinitionIDTerminalRuleCall_0_1() { return cProcProcessDefinitionIDTerminalRuleCall_0_1; }
	}
	public class PDPCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.PDPCall");
		private final Assignment cProcAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cProcProcessDefinitionCrossReference_0 = (CrossReference)cProcAssignment.eContents().get(0);
		private final RuleCall cProcProcessDefinitionIDTerminalRuleCall_0_1 = (RuleCall)cProcProcessDefinitionCrossReference_0.eContents().get(1);
		
		//PDPCall ProcessCall:
		//	proc=[ProcessDefinition];
		@Override public ParserRule getRule() { return rule; }
		
		//proc=[ProcessDefinition]
		public Assignment getProcAssignment() { return cProcAssignment; }
		
		//[ProcessDefinition]
		public CrossReference getProcProcessDefinitionCrossReference_0() { return cProcProcessDefinitionCrossReference_0; }
		
		//ID
		public RuleCall getProcProcessDefinitionIDTerminalRuleCall_0_1() { return cProcProcessDefinitionIDTerminalRuleCall_0_1; }
	}
	public class ProcessBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.ProcessBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cProcessBlockAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsProcessStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ProcessBlock:
		//	"{" {ProcessBlock} statements+=ProcessStatement*
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"{" {ProcessBlock} statements+=ProcessStatement* "}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//{ProcessBlock}
		public Action getProcessBlockAction_1() { return cProcessBlockAction_1; }
		
		//statements+=ProcessStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//ProcessStatement
		public RuleCall getStatementsProcessStatementParserRuleCall_2_0() { return cStatementsProcessStatementParserRuleCall_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ProcessStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.ProcessStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProcessSpawnParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProcessCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cProcessSendParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cProcessReceiveParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cProcessIfParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cProcessSetParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cProcessWaitForParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cProcessLoopParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//ProcessStatement:
		//	ProcessSpawn | ProcessCall | ProcessSend | ProcessReceive | ProcessIf | ProcessSet | ProcessWaitFor | ProcessLoop;
		@Override public ParserRule getRule() { return rule; }
		
		//ProcessSpawn | ProcessCall | ProcessSend | ProcessReceive | ProcessIf | ProcessSet | ProcessWaitFor | ProcessLoop
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ProcessSpawn
		public RuleCall getProcessSpawnParserRuleCall_0() { return cProcessSpawnParserRuleCall_0; }
		
		//ProcessCall
		public RuleCall getProcessCallParserRuleCall_1() { return cProcessCallParserRuleCall_1; }
		
		//ProcessSend
		public RuleCall getProcessSendParserRuleCall_2() { return cProcessSendParserRuleCall_2; }
		
		//ProcessReceive
		public RuleCall getProcessReceiveParserRuleCall_3() { return cProcessReceiveParserRuleCall_3; }
		
		//ProcessIf
		public RuleCall getProcessIfParserRuleCall_4() { return cProcessIfParserRuleCall_4; }
		
		//ProcessSet
		public RuleCall getProcessSetParserRuleCall_5() { return cProcessSetParserRuleCall_5; }
		
		//ProcessWaitFor
		public RuleCall getProcessWaitForParserRuleCall_6() { return cProcessWaitForParserRuleCall_6; }
		
		//ProcessLoop
		public RuleCall getProcessLoopParserRuleCall_7() { return cProcessLoopParserRuleCall_7; }
	}
	public class ProcessSpawnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.ProcessSpawn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpawnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProcAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cProcProcessDefinitionCrossReference_2_0 = (CrossReference)cProcAssignment_2.eContents().get(0);
		private final RuleCall cProcProcessDefinitionIDTerminalRuleCall_2_0_1 = (RuleCall)cProcProcessDefinitionCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ProcessSpawn:
		//	"spawn" "(" proc=[ProcessDefinition] ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"spawn" "(" proc=[ProcessDefinition] ")"
		public Group getGroup() { return cGroup; }
		
		//"spawn"
		public Keyword getSpawnKeyword_0() { return cSpawnKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//proc=[ProcessDefinition]
		public Assignment getProcAssignment_2() { return cProcAssignment_2; }
		
		//[ProcessDefinition]
		public CrossReference getProcProcessDefinitionCrossReference_2_0() { return cProcProcessDefinitionCrossReference_2_0; }
		
		//ID
		public RuleCall getProcProcessDefinitionIDTerminalRuleCall_2_0_1() { return cProcProcessDefinitionIDTerminalRuleCall_2_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ProcessCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.ProcessCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProcAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cProcProcessDefinitionCrossReference_2_0 = (CrossReference)cProcAssignment_2.eContents().get(0);
		private final RuleCall cProcProcessDefinitionIDTerminalRuleCall_2_0_1 = (RuleCall)cProcProcessDefinitionCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ProcessCall:
		//	"call" "(" proc=[ProcessDefinition] ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"call" "(" proc=[ProcessDefinition] ")"
		public Group getGroup() { return cGroup; }
		
		//"call"
		public Keyword getCallKeyword_0() { return cCallKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//proc=[ProcessDefinition]
		public Assignment getProcAssignment_2() { return cProcAssignment_2; }
		
		//[ProcessDefinition]
		public CrossReference getProcProcessDefinitionCrossReference_2_0() { return cProcProcessDefinitionCrossReference_2_0; }
		
		//ID
		public RuleCall getProcProcessDefinitionIDTerminalRuleCall_2_0_1() { return cProcProcessDefinitionIDTerminalRuleCall_2_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ProcessSendElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.ProcessSend");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSendKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cMsgOutPartsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cMsgOutPartsExpressionParserRuleCall_2_0_0 = (RuleCall)cMsgOutPartsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cMsgOutPartsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cMsgOutPartsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cMsgOutPartsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cCommercialAtKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSend_predAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSend_predExpressionParserRuleCall_6_0 = (RuleCall)cSend_predAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cUpdatesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cUpdatesUpdateParserRuleCall_8_0 = (RuleCall)cUpdatesAssignment_8.eContents().get(0);
		private final Assignment cPrintAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cPrintPrintStatementParserRuleCall_9_0 = (RuleCall)cPrintAssignment_9.eContents().get(0);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//ProcessSend:
		//	"send" "{" (msgOutParts+=Expression ("," msgOutParts+=Expression)*)? "}" "@" "(" send_pred=Expression ")"
		//	updates=Update print=PrintStatement? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"send" "{" (msgOutParts+=Expression ("," msgOutParts+=Expression)*)? "}" "@" "(" send_pred=Expression ")" updates=Update
		//print=PrintStatement? ";"
		public Group getGroup() { return cGroup; }
		
		//"send"
		public Keyword getSendKeyword_0() { return cSendKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(msgOutParts+=Expression ("," msgOutParts+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//msgOutParts+=Expression
		public Assignment getMsgOutPartsAssignment_2_0() { return cMsgOutPartsAssignment_2_0; }
		
		//Expression
		public RuleCall getMsgOutPartsExpressionParserRuleCall_2_0_0() { return cMsgOutPartsExpressionParserRuleCall_2_0_0; }
		
		//("," msgOutParts+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//msgOutParts+=Expression
		public Assignment getMsgOutPartsAssignment_2_1_1() { return cMsgOutPartsAssignment_2_1_1; }
		
		//Expression
		public RuleCall getMsgOutPartsExpressionParserRuleCall_2_1_1_0() { return cMsgOutPartsExpressionParserRuleCall_2_1_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
		
		//"@"
		public Keyword getCommercialAtKeyword_4() { return cCommercialAtKeyword_4; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//send_pred=Expression
		public Assignment getSend_predAssignment_6() { return cSend_predAssignment_6; }
		
		//Expression
		public RuleCall getSend_predExpressionParserRuleCall_6_0() { return cSend_predExpressionParserRuleCall_6_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//updates=Update
		public Assignment getUpdatesAssignment_8() { return cUpdatesAssignment_8; }
		
		//Update
		public RuleCall getUpdatesUpdateParserRuleCall_8_0() { return cUpdatesUpdateParserRuleCall_8_0; }
		
		//print=PrintStatement?
		public Assignment getPrintAssignment_9() { return cPrintAssignment_9; }
		
		//PrintStatement
		public RuleCall getPrintPrintStatementParserRuleCall_9_0() { return cPrintPrintStatementParserRuleCall_9_0; }
		
		//";"
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
	}
	public class ProcessReceiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.ProcessReceive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProcessReceiveSingleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProcessReceiveMultipleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ProcessReceive:
		//	ProcessReceiveSingle | ProcessReceiveMultiple;
		@Override public ParserRule getRule() { return rule; }
		
		//ProcessReceiveSingle | ProcessReceiveMultiple
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ProcessReceiveSingle
		public RuleCall getProcessReceiveSingleParserRuleCall_0() { return cProcessReceiveSingleParserRuleCall_0; }
		
		//ProcessReceiveMultiple
		public RuleCall getProcessReceiveMultipleParserRuleCall_1() { return cProcessReceiveMultipleParserRuleCall_1; }
	}
	public class ProcessReceiveSingleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.ProcessReceiveSingle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReceiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCasesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCasesReceiveCaseParserRuleCall_1_0 = (RuleCall)cCasesAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenEmptyProcessBlockParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		
		//ProcessReceiveSingle:
		//	"receive" cases+=ReceiveCase ";" then+=EmptyProcessBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//"receive" cases+=ReceiveCase ";" then+=EmptyProcessBlock
		public Group getGroup() { return cGroup; }
		
		//"receive"
		public Keyword getReceiveKeyword_0() { return cReceiveKeyword_0; }
		
		//cases+=ReceiveCase
		public Assignment getCasesAssignment_1() { return cCasesAssignment_1; }
		
		//ReceiveCase
		public RuleCall getCasesReceiveCaseParserRuleCall_1_0() { return cCasesReceiveCaseParserRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//then+=EmptyProcessBlock
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }
		
		//EmptyProcessBlock
		public RuleCall getThenEmptyProcessBlockParserRuleCall_3_0() { return cThenEmptyProcessBlockParserRuleCall_3_0; }
	}
	public class EmptyProcessBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.EmptyProcessBlock");
		private final Action cProcessBlockAction = (Action)rule.eContents().get(1);
		
		//EmptyProcessBlock ProcessBlock:
		//	{ProcessBlock};
		@Override public ParserRule getRule() { return rule; }
		
		//{ProcessBlock}
		public Action getProcessBlockAction() { return cProcessBlockAction; }
	}
	public class ProcessReceiveMultipleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.ProcessReceiveMultiple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReceiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCaseKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCasesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCasesReceiveCaseParserRuleCall_2_1_0 = (RuleCall)cCasesAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cThenAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cThenProcessBlockParserRuleCall_2_3_0 = (RuleCall)cThenAssignment_2_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ProcessReceiveMultiple:
		//	"receive" "{" ("case" cases+=ReceiveCase ":" then+=ProcessBlock)+
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"receive" "{" ("case" cases+=ReceiveCase ":" then+=ProcessBlock)+ "}"
		public Group getGroup() { return cGroup; }
		
		//"receive"
		public Keyword getReceiveKeyword_0() { return cReceiveKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//("case" cases+=ReceiveCase ":" then+=ProcessBlock)+
		public Group getGroup_2() { return cGroup_2; }
		
		//"case"
		public Keyword getCaseKeyword_2_0() { return cCaseKeyword_2_0; }
		
		//cases+=ReceiveCase
		public Assignment getCasesAssignment_2_1() { return cCasesAssignment_2_1; }
		
		//ReceiveCase
		public RuleCall getCasesReceiveCaseParserRuleCall_2_1_0() { return cCasesReceiveCaseParserRuleCall_2_1_0; }
		
		//":"
		public Keyword getColonKeyword_2_2() { return cColonKeyword_2_2; }
		
		//then+=ProcessBlock
		public Assignment getThenAssignment_2_3() { return cThenAssignment_2_3; }
		
		//ProcessBlock
		public RuleCall getThenProcessBlockParserRuleCall_2_3_0() { return cThenProcessBlockParserRuleCall_2_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ReceiveCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.ReceiveCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondExpressionParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cMsgInPartsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cMsgInPartsIDTerminalRuleCall_4_0_0 = (RuleCall)cMsgInPartsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cMsgInPartsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cMsgInPartsIDTerminalRuleCall_4_1_1_0 = (RuleCall)cMsgInPartsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cUpdatesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cUpdatesUpdateParserRuleCall_6_0 = (RuleCall)cUpdatesAssignment_6.eContents().get(0);
		private final Assignment cPrintAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPrintPrintStatementParserRuleCall_7_0 = (RuleCall)cPrintAssignment_7.eContents().get(0);
		
		//ReceiveCase:
		//	"(" cond=Expression ")" "{" (msgInParts+=ID ("," msgInParts+=ID)*)? "}"
		//	updates=Update print=PrintStatement?;
		@Override public ParserRule getRule() { return rule; }
		
		//"(" cond=Expression ")" "{" (msgInParts+=ID ("," msgInParts+=ID)*)? "}" updates=Update print=PrintStatement?
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//cond=Expression
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_1_0() { return cCondExpressionParserRuleCall_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(msgInParts+=ID ("," msgInParts+=ID)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//msgInParts+=ID
		public Assignment getMsgInPartsAssignment_4_0() { return cMsgInPartsAssignment_4_0; }
		
		//ID
		public RuleCall getMsgInPartsIDTerminalRuleCall_4_0_0() { return cMsgInPartsIDTerminalRuleCall_4_0_0; }
		
		//("," msgInParts+=ID)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//msgInParts+=ID
		public Assignment getMsgInPartsAssignment_4_1_1() { return cMsgInPartsAssignment_4_1_1; }
		
		//ID
		public RuleCall getMsgInPartsIDTerminalRuleCall_4_1_1_0() { return cMsgInPartsIDTerminalRuleCall_4_1_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//updates=Update
		public Assignment getUpdatesAssignment_6() { return cUpdatesAssignment_6; }
		
		//Update
		public RuleCall getUpdatesUpdateParserRuleCall_6_0() { return cUpdatesUpdateParserRuleCall_6_0; }
		
		//print=PrintStatement?
		public Assignment getPrintAssignment_7() { return cPrintAssignment_7; }
		
		//PrintStatement
		public RuleCall getPrintPrintStatementParserRuleCall_7_0() { return cPrintPrintStatementParserRuleCall_7_0; }
	}
	public class ProcessIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.ProcessIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondExpressionParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cProcessThenBlockParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cIfKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cCondAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cCondExpressionParserRuleCall_5_3_0 = (RuleCall)cCondAssignment_5_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final RuleCall cProcessThenBlockParserRuleCall_5_5 = (RuleCall)cGroup_5.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cProcessThenBlockParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		
		//ProcessIf:
		//	"if" "(" cond+=Expression ")" ProcessThenBlock ("else" "if" "(" cond+=Expression ")" ProcessThenBlock)* ("else"
		//	ProcessThenBlock)?;
		@Override public ParserRule getRule() { return rule; }
		
		//"if" "(" cond+=Expression ")" ProcessThenBlock ("else" "if" "(" cond+=Expression ")" ProcessThenBlock)* ("else"
		//ProcessThenBlock)?
		public Group getGroup() { return cGroup; }
		
		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//cond+=Expression
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_2_0() { return cCondExpressionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//ProcessThenBlock
		public RuleCall getProcessThenBlockParserRuleCall_4() { return cProcessThenBlockParserRuleCall_4; }
		
		//("else" "if" "(" cond+=Expression ")" ProcessThenBlock)*
		public Group getGroup_5() { return cGroup_5; }
		
		//"else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//"if"
		public Keyword getIfKeyword_5_1() { return cIfKeyword_5_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_5_2() { return cLeftParenthesisKeyword_5_2; }
		
		//cond+=Expression
		public Assignment getCondAssignment_5_3() { return cCondAssignment_5_3; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_5_3_0() { return cCondExpressionParserRuleCall_5_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }
		
		//ProcessThenBlock
		public RuleCall getProcessThenBlockParserRuleCall_5_5() { return cProcessThenBlockParserRuleCall_5_5; }
		
		//("else" ProcessThenBlock)?
		public Group getGroup_6() { return cGroup_6; }
		
		//"else"
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }
		
		//ProcessThenBlock
		public RuleCall getProcessThenBlockParserRuleCall_6_1() { return cProcessThenBlockParserRuleCall_6_1; }
	}
	public class ProcessThenBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.ProcessThenBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cActionAlternatives_1_0 = (Alternatives)cActionAssignment_1.eContents().get(0);
		private final RuleCall cActionProcessSendParserRuleCall_1_0_0 = (RuleCall)cActionAlternatives_1_0.eContents().get(0);
		private final RuleCall cActionProcessReceiveParserRuleCall_1_0_1 = (RuleCall)cActionAlternatives_1_0.eContents().get(1);
		private final RuleCall cActionProcessSetParserRuleCall_1_0_2 = (RuleCall)cActionAlternatives_1_0.eContents().get(2);
		private final Assignment cThenAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cThenPTBThenParserRuleCall_2_0 = (RuleCall)cThenAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//fragment ProcessThenBlock:
		//	"{" action+=(ProcessSend | ProcessReceive | ProcessSet) then+=PTBThen "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"{" action+=(ProcessSend | ProcessReceive | ProcessSet) then+=PTBThen "}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//action+=(ProcessSend | ProcessReceive | ProcessSet)
		public Assignment getActionAssignment_1() { return cActionAssignment_1; }
		
		//(ProcessSend | ProcessReceive | ProcessSet)
		public Alternatives getActionAlternatives_1_0() { return cActionAlternatives_1_0; }
		
		//ProcessSend
		public RuleCall getActionProcessSendParserRuleCall_1_0_0() { return cActionProcessSendParserRuleCall_1_0_0; }
		
		//ProcessReceive
		public RuleCall getActionProcessReceiveParserRuleCall_1_0_1() { return cActionProcessReceiveParserRuleCall_1_0_1; }
		
		//ProcessSet
		public RuleCall getActionProcessSetParserRuleCall_1_0_2() { return cActionProcessSetParserRuleCall_1_0_2; }
		
		//then+=PTBThen
		public Assignment getThenAssignment_2() { return cThenAssignment_2; }
		
		//PTBThen
		public RuleCall getThenPTBThenParserRuleCall_2_0() { return cThenPTBThenParserRuleCall_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class PTBThenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.PTBThen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProcessBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsProcessStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		
		//PTBThen ProcessBlock:
		//	{ProcessBlock} statements+=ProcessStatement*;
		@Override public ParserRule getRule() { return rule; }
		
		//{ProcessBlock} statements+=ProcessStatement*
		public Group getGroup() { return cGroup; }
		
		//{ProcessBlock}
		public Action getProcessBlockAction_0() { return cProcessBlockAction_0; }
		
		//statements+=ProcessStatement*
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }
		
		//ProcessStatement
		public RuleCall getStatementsProcessStatementParserRuleCall_1_0() { return cStatementsProcessStatementParserRuleCall_1_0; }
	}
	public class ProcessSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.ProcessSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUpdateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUpdateUpdateParserRuleCall_1_0 = (RuleCall)cUpdateAssignment_1.eContents().get(0);
		private final Assignment cPrintAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPrintPrintStatementParserRuleCall_2_0 = (RuleCall)cPrintAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ProcessSet:
		//	"set" update=Update print=PrintStatement? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"set" update=Update print=PrintStatement? ";"
		public Group getGroup() { return cGroup; }
		
		//"set"
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//update=Update
		public Assignment getUpdateAssignment_1() { return cUpdateAssignment_1; }
		
		//Update
		public RuleCall getUpdateUpdateParserRuleCall_1_0() { return cUpdateUpdateParserRuleCall_1_0; }
		
		//print=PrintStatement?
		public Assignment getPrintAssignment_2() { return cPrintAssignment_2; }
		
		//PrintStatement
		public RuleCall getPrintPrintStatementParserRuleCall_2_0() { return cPrintPrintStatementParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ProcessWaitForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.ProcessWaitFor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWaitforKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondExpressionParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUpdateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUpdateUpdateParserRuleCall_4_0 = (RuleCall)cUpdateAssignment_4.eContents().get(0);
		private final Assignment cPrintAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPrintPrintStatementParserRuleCall_5_0 = (RuleCall)cPrintAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ProcessWaitFor:
		//	"waitfor" "(" cond=Expression ")" update=Update print=PrintStatement? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"waitfor" "(" cond=Expression ")" update=Update print=PrintStatement? ";"
		public Group getGroup() { return cGroup; }
		
		//"waitfor"
		public Keyword getWaitforKeyword_0() { return cWaitforKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//cond=Expression
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_2_0() { return cCondExpressionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//update=Update
		public Assignment getUpdateAssignment_4() { return cUpdateAssignment_4; }
		
		//Update
		public RuleCall getUpdateUpdateParserRuleCall_4_0() { return cUpdateUpdateParserRuleCall_4_0; }
		
		//print=PrintStatement?
		public Assignment getPrintAssignment_5() { return cPrintAssignment_5; }
		
		//PrintStatement
		public RuleCall getPrintPrintStatementParserRuleCall_5_0() { return cPrintPrintStatementParserRuleCall_5_0; }
		
		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class ProcessLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.ProcessLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockProcessBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//ProcessLoop:
		//	"loop" block=ProcessBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//"loop" block=ProcessBlock
		public Group getGroup() { return cGroup; }
		
		//"loop"
		public Keyword getLoopKeyword_0() { return cLoopKeyword_0; }
		
		//block=ProcessBlock
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }
		
		//ProcessBlock
		public RuleCall getBlockProcessBlockParserRuleCall_1_0() { return cBlockProcessBlockParserRuleCall_1_0; }
	}
	public class UpdateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Update");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUpdateAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAttributeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cAttributeAlternatives_1_1_0 = (Alternatives)cAttributeAssignment_1_1.eContents().get(0);
		private final RuleCall cAttributeUpdateComponentAttributeParserRuleCall_1_1_0_0 = (RuleCall)cAttributeAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cAttributeUpdateLocalAttributeParserRuleCall_1_1_0_1 = (RuleCall)cAttributeAlternatives_1_1_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cValueAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_1_3_0 = (RuleCall)cValueAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cCommaKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cAttributeAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final Alternatives cAttributeAlternatives_1_4_1_0 = (Alternatives)cAttributeAssignment_1_4_1.eContents().get(0);
		private final RuleCall cAttributeUpdateComponentAttributeParserRuleCall_1_4_1_0_0 = (RuleCall)cAttributeAlternatives_1_4_1_0.eContents().get(0);
		private final RuleCall cAttributeUpdateLocalAttributeParserRuleCall_1_4_1_0_1 = (RuleCall)cAttributeAlternatives_1_4_1_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_1_4_2 = (Keyword)cGroup_1_4.eContents().get(2);
		private final Assignment cValueAssignment_1_4_3 = (Assignment)cGroup_1_4.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_1_4_3_0 = (RuleCall)cValueAssignment_1_4_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//Update:
		//	{Update} ("[" attribute+=(UpdateComponentAttribute | UpdateLocalAttribute) ":=" value+=Expression (","
		//	attribute+=(UpdateComponentAttribute | UpdateLocalAttribute) ":=" value+=Expression)* "]")?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Update} ("[" attribute+=(UpdateComponentAttribute | UpdateLocalAttribute) ":=" value+=Expression (","
		//attribute+=(UpdateComponentAttribute | UpdateLocalAttribute) ":=" value+=Expression)* "]")?
		public Group getGroup() { return cGroup; }
		
		//{Update}
		public Action getUpdateAction_0() { return cUpdateAction_0; }
		
		//("[" attribute+=(UpdateComponentAttribute | UpdateLocalAttribute) ":=" value+=Expression (","
		//attribute+=(UpdateComponentAttribute | UpdateLocalAttribute) ":=" value+=Expression)* "]")?
		public Group getGroup_1() { return cGroup_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//attribute+=(UpdateComponentAttribute | UpdateLocalAttribute)
		public Assignment getAttributeAssignment_1_1() { return cAttributeAssignment_1_1; }
		
		//(UpdateComponentAttribute | UpdateLocalAttribute)
		public Alternatives getAttributeAlternatives_1_1_0() { return cAttributeAlternatives_1_1_0; }
		
		//UpdateComponentAttribute
		public RuleCall getAttributeUpdateComponentAttributeParserRuleCall_1_1_0_0() { return cAttributeUpdateComponentAttributeParserRuleCall_1_1_0_0; }
		
		//UpdateLocalAttribute
		public RuleCall getAttributeUpdateLocalAttributeParserRuleCall_1_1_0_1() { return cAttributeUpdateLocalAttributeParserRuleCall_1_1_0_1; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_1_2() { return cColonEqualsSignKeyword_1_2; }
		
		//value+=Expression
		public Assignment getValueAssignment_1_3() { return cValueAssignment_1_3; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_3_0() { return cValueExpressionParserRuleCall_1_3_0; }
		
		//("," attribute+=(UpdateComponentAttribute | UpdateLocalAttribute) ":=" value+=Expression)*
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//","
		public Keyword getCommaKeyword_1_4_0() { return cCommaKeyword_1_4_0; }
		
		//attribute+=(UpdateComponentAttribute | UpdateLocalAttribute)
		public Assignment getAttributeAssignment_1_4_1() { return cAttributeAssignment_1_4_1; }
		
		//(UpdateComponentAttribute | UpdateLocalAttribute)
		public Alternatives getAttributeAlternatives_1_4_1_0() { return cAttributeAlternatives_1_4_1_0; }
		
		//UpdateComponentAttribute
		public RuleCall getAttributeUpdateComponentAttributeParserRuleCall_1_4_1_0_0() { return cAttributeUpdateComponentAttributeParserRuleCall_1_4_1_0_0; }
		
		//UpdateLocalAttribute
		public RuleCall getAttributeUpdateLocalAttributeParserRuleCall_1_4_1_0_1() { return cAttributeUpdateLocalAttributeParserRuleCall_1_4_1_0_1; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_1_4_2() { return cColonEqualsSignKeyword_1_4_2; }
		
		//value+=Expression
		public Assignment getValueAssignment_1_4_3() { return cValueAssignment_1_4_3; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_4_3_0() { return cValueExpressionParserRuleCall_1_4_3_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_5() { return cRightSquareBracketKeyword_1_5; }
	}
	public class UpdateComponentAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.UpdateComponentAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAtnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAtnameIDTerminalRuleCall_2_0 = (RuleCall)cAtnameAssignment_2.eContents().get(0);
		
		//UpdateComponentAttribute:
		//	"comp" "." atname=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//"comp" "." atname=ID
		public Group getGroup() { return cGroup; }
		
		//"comp"
		public Keyword getCompKeyword_0() { return cCompKeyword_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//atname=ID
		public Assignment getAtnameAssignment_2() { return cAtnameAssignment_2; }
		
		//ID
		public RuleCall getAtnameIDTerminalRuleCall_2_0() { return cAtnameIDTerminalRuleCall_2_0; }
	}
	public class UpdateLocalAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.UpdateLocalAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAtnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAtnameIDTerminalRuleCall_2_0 = (RuleCall)cAtnameAssignment_2.eContents().get(0);
		
		//UpdateLocalAttribute:
		//	"proc" "." atname=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//"proc" "." atname=ID
		public Group getGroup() { return cGroup; }
		
		//"proc"
		public Keyword getProcKeyword_0() { return cProcKeyword_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//atname=ID
		public Assignment getAtnameAssignment_2() { return cAtnameAssignment_2; }
		
		//ID
		public RuleCall getAtnameIDTerminalRuleCall_2_0() { return cAtnameIDTerminalRuleCall_2_0; }
	}
	public class PrintStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.PrintStatement");
		private final RuleCall cPrintFormattedStatementParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PrintStatement:
		//	PrintFormattedStatement;
		@Override public ParserRule getRule() { return rule; }
		
		///*PrintAllStatement|*/ PrintFormattedStatement
		public RuleCall getPrintFormattedStatementParserRuleCall() { return cPrintFormattedStatementParserRuleCall; }
	}
	public class PrintAllStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.PrintAllStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrintAllStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrintKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PrintAllStatement:
		//	{PrintAllStatement} "print";
		@Override public ParserRule getRule() { return rule; }
		
		//{PrintAllStatement} "print"
		public Group getGroup() { return cGroup; }
		
		//{PrintAllStatement}
		public Action getPrintAllStatementAction_0() { return cPrintAllStatementAction_0; }
		
		//"print"
		public Keyword getPrintKeyword_1() { return cPrintKeyword_1; }
	}
	public class PrintFormattedStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.PrintFormattedStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cToPrintAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cToPrintSTRINGTerminalRuleCall_2_0 = (RuleCall)cToPrintAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PrintFormattedStatement:
		//	"print" "(" toPrint=STRING ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"print" "(" toPrint=STRING ")"
		public Group getGroup() { return cGroup; }
		
		//"print"
		public Keyword getPrintKeyword_0() { return cPrintKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//toPrint=STRING
		public Assignment getToPrintAssignment_2() { return cToPrintAssignment_2; }
		
		//STRING
		public RuleCall getToPrintSTRINGTerminalRuleCall_2_0() { return cToPrintSTRINGTerminalRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class EnvInitValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.EnvInitValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNegativeIntConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNegvalueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNegvalueINTTerminalRuleCall_0_2_0 = (RuleCall)cNegvalueAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIntConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cStringConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBoolConstantAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cValueAlternatives_3_1_0 = (Alternatives)cValueAssignment_3_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_3_1_0_0 = (Keyword)cValueAlternatives_3_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_3_1_0_1 = (Keyword)cValueAlternatives_3_1_0.eContents().get(1);
		
		//// Component
		//EnvInitValue Expression:
		//	{NegativeIntConstant} "-" negvalue=INT | {IntConstant} value=INT | {StringConstant} value=STRING | {BoolConstant}
		//	value=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//{NegativeIntConstant} "-" negvalue=INT | {IntConstant} value=INT | {StringConstant} value=STRING | {BoolConstant}
		//value=('true' | 'false')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{NegativeIntConstant} "-" negvalue=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{NegativeIntConstant}
		public Action getNegativeIntConstantAction_0_0() { return cNegativeIntConstantAction_0_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }
		
		//negvalue=INT
		public Assignment getNegvalueAssignment_0_2() { return cNegvalueAssignment_0_2; }
		
		//INT
		public RuleCall getNegvalueINTTerminalRuleCall_0_2_0() { return cNegvalueINTTerminalRuleCall_0_2_0; }
		
		//{IntConstant} value=INT
		public Group getGroup_1() { return cGroup_1; }
		
		//{IntConstant}
		public Action getIntConstantAction_1_0() { return cIntConstantAction_1_0; }
		
		//value=INT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_1_0() { return cValueINTTerminalRuleCall_1_1_0; }
		
		//{StringConstant} value=STRING
		public Group getGroup_2() { return cGroup_2; }
		
		//{StringConstant}
		public Action getStringConstantAction_2_0() { return cStringConstantAction_2_0; }
		
		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }
		
		//{BoolConstant} value=('true' | 'false')
		public Group getGroup_3() { return cGroup_3; }
		
		//{BoolConstant}
		public Action getBoolConstantAction_3_0() { return cBoolConstantAction_3_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_3_1_0() { return cValueAlternatives_3_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_3_1_0_0() { return cValueTrueKeyword_3_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_3_1_0_1() { return cValueFalseKeyword_3_1_0_1; }
	}
	public class EnvironmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Environment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnvironmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cAttrsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cAttrsIDTerminalRuleCall_2_0_0 = (RuleCall)cAttrsAssignment_2_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cValsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cValsEnvInitValueParserRuleCall_2_2_0 = (RuleCall)cValsAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cAttrsAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cAttrsIDTerminalRuleCall_2_3_1_0 = (RuleCall)cAttrsAssignment_2_3_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2_3_2 = (Keyword)cGroup_2_3.eContents().get(2);
		private final Assignment cValsAssignment_2_3_3 = (Assignment)cGroup_2_3.eContents().get(3);
		private final RuleCall cValsEnvInitValueParserRuleCall_2_3_3_0 = (RuleCall)cValsAssignment_2_3_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Environment:
		//	{Environment} "{" (attrs+=ID ':=' vals+=EnvInitValue ("," attrs+=ID ':=' vals+=EnvInitValue)*)? "}";
		@Override public ParserRule getRule() { return rule; }
		
		//{Environment} "{" (attrs+=ID ':=' vals+=EnvInitValue ("," attrs+=ID ':=' vals+=EnvInitValue)*)? "}"
		public Group getGroup() { return cGroup; }
		
		//{Environment}
		public Action getEnvironmentAction_0() { return cEnvironmentAction_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(attrs+=ID ':=' vals+=EnvInitValue ("," attrs+=ID ':=' vals+=EnvInitValue)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//attrs+=ID
		public Assignment getAttrsAssignment_2_0() { return cAttrsAssignment_2_0; }
		
		//ID
		public RuleCall getAttrsIDTerminalRuleCall_2_0_0() { return cAttrsIDTerminalRuleCall_2_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_2_1() { return cColonEqualsSignKeyword_2_1; }
		
		//vals+=EnvInitValue
		public Assignment getValsAssignment_2_2() { return cValsAssignment_2_2; }
		
		//EnvInitValue
		public RuleCall getValsEnvInitValueParserRuleCall_2_2_0() { return cValsEnvInitValueParserRuleCall_2_2_0; }
		
		//("," attrs+=ID ':=' vals+=EnvInitValue)*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }
		
		//attrs+=ID
		public Assignment getAttrsAssignment_2_3_1() { return cAttrsAssignment_2_3_1; }
		
		//ID
		public RuleCall getAttrsIDTerminalRuleCall_2_3_1_0() { return cAttrsIDTerminalRuleCall_2_3_1_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_2_3_2() { return cColonEqualsSignKeyword_2_3_2; }
		
		//vals+=EnvInitValue
		public Assignment getValsAssignment_2_3_3() { return cValsAssignment_2_3_3; }
		
		//EnvInitValue
		public RuleCall getValsEnvInitValueParserRuleCall_2_3_3_0() { return cValsEnvInitValueParserRuleCall_2_3_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class EnvironmentDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.EnvironmentDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnvironmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cEnvAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEnvEnvironmentParserRuleCall_2_0 = (RuleCall)cEnvAssignment_2.eContents().get(0);
		
		//EnvironmentDefinition:
		//	'environment' name=ID env=Environment;
		@Override public ParserRule getRule() { return rule; }
		
		//'environment' name=ID env=Environment
		public Group getGroup() { return cGroup; }
		
		//'environment'
		public Keyword getEnvironmentKeyword_0() { return cEnvironmentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//env=Environment
		public Assignment getEnvAssignment_2() { return cEnvAssignment_2; }
		
		//Environment
		public RuleCall getEnvEnvironmentParserRuleCall_2_0() { return cEnvEnvironmentParserRuleCall_2_0; }
	}
	public class ComponentDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.ComponentDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cEnvrefAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final CrossReference cEnvrefEnvironmentDefinitionCrossReference_1_0_0 = (CrossReference)cEnvrefAssignment_1_0.eContents().get(0);
		private final RuleCall cEnvrefEnvironmentDefinitionIDTerminalRuleCall_1_0_0_1 = (RuleCall)cEnvrefEnvironmentDefinitionCrossReference_1_0_0.eContents().get(1);
		private final Assignment cEnvAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cEnvEnvironmentParserRuleCall_1_1_0 = (RuleCall)cEnvAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cBlockAlternatives_3_0 = (Alternatives)cBlockAssignment_3.eContents().get(0);
		private final RuleCall cBlockPDPBlockParserRuleCall_3_0_0 = (RuleCall)cBlockAlternatives_3_0.eContents().get(0);
		private final RuleCall cBlockProcessBlockParserRuleCall_3_0_1 = (RuleCall)cBlockAlternatives_3_0.eContents().get(1);
		
		//ComponentDefinition:
		//	"component" (envref=[EnvironmentDefinition] | env=Environment) ':' block=(PDPBlock | ProcessBlock);
		@Override public ParserRule getRule() { return rule; }
		
		//"component" (envref=[EnvironmentDefinition] | env=Environment) ':' block=(PDPBlock | ProcessBlock)
		public Group getGroup() { return cGroup; }
		
		//"component"
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//envref=[EnvironmentDefinition] | env=Environment
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//envref=[EnvironmentDefinition]
		public Assignment getEnvrefAssignment_1_0() { return cEnvrefAssignment_1_0; }
		
		//[EnvironmentDefinition]
		public CrossReference getEnvrefEnvironmentDefinitionCrossReference_1_0_0() { return cEnvrefEnvironmentDefinitionCrossReference_1_0_0; }
		
		//ID
		public RuleCall getEnvrefEnvironmentDefinitionIDTerminalRuleCall_1_0_0_1() { return cEnvrefEnvironmentDefinitionIDTerminalRuleCall_1_0_0_1; }
		
		//env=Environment
		public Assignment getEnvAssignment_1_1() { return cEnvAssignment_1_1; }
		
		//Environment
		public RuleCall getEnvEnvironmentParserRuleCall_1_1_0() { return cEnvEnvironmentParserRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//block=(PDPBlock | ProcessBlock)
		public Assignment getBlockAssignment_3() { return cBlockAssignment_3; }
		
		//(PDPBlock | ProcessBlock)
		public Alternatives getBlockAlternatives_3_0() { return cBlockAlternatives_3_0; }
		
		//PDPBlock
		public RuleCall getBlockPDPBlockParserRuleCall_3_0_0() { return cBlockPDPBlockParserRuleCall_3_0_0; }
		
		//ProcessBlock
		public RuleCall getBlockProcessBlockParserRuleCall_3_0_1() { return cBlockProcessBlockParserRuleCall_3_0_1; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Expression");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Expression
		//Expression:
		//	Or;
		@Override public ParserRule getRule() { return rule; }
		
		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrSubAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cSubAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSubAndParserRuleCall_1_2_0 = (RuleCall)cSubAssignment_1_2.eContents().get(0);
		
		//Or Expression:
		//	And ({Or.sub+=current} "||" sub+=And)*;
		@Override public ParserRule getRule() { return rule; }
		
		//And ({Or.sub+=current} "||" sub+=And)*
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({Or.sub+=current} "||" sub+=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.sub+=current}
		public Action getOrSubAction_1_0() { return cOrSubAction_1_0; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//sub+=And
		public Assignment getSubAssignment_1_2() { return cSubAssignment_1_2; }
		
		//And
		public RuleCall getSubAndParserRuleCall_1_2_0() { return cSubAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndSubAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cSubAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSubEqualityParserRuleCall_1_2_0 = (RuleCall)cSubAssignment_1_2.eContents().get(0);
		
		//And Expression:
		//	Equality ({And.sub+=current} "&&" sub+=Equality)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Equality ({And.sub+=current} "&&" sub+=Equality)*
		public Group getGroup() { return cGroup; }
		
		//Equality
		public RuleCall getEqualityParserRuleCall_0() { return cEqualityParserRuleCall_0; }
		
		//({And.sub+=current} "&&" sub+=Equality)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.sub+=current}
		public Action getAndSubAction_1_0() { return cAndSubAction_1_0; }
		
		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//sub+=Equality
		public Assignment getSubAssignment_1_2() { return cSubAssignment_1_2; }
		
		//Equality
		public RuleCall getSubEqualityParserRuleCall_1_2_0() { return cSubEqualityParserRuleCall_1_2_0; }
	}
	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Equality Expression:
		//	Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)?
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//({Equality.left=current} op=("==" | "!=") right=Comparison)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0() { return cEqualityLeftAction_1_0; }
		
		//op=("==" | "!=")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//("==" | "!=")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }
		
		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusOrMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusOrMinusParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison Expression:
		//	PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)?;
		@Override public ParserRule getRule() { return rule; }
		
		//PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)?
		public Group getGroup() { return cGroup; }
		
		//PlusOrMinus
		public RuleCall getPlusOrMinusParserRuleCall_0() { return cPlusOrMinusParserRuleCall_0; }
		
		//({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }
		
		//op=(">=" | "<=" | ">" | "<")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//(">=" | "<=" | ">" | "<")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_0() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_0; }
		
		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }
		
		//">"
		public Keyword getOpGreaterThanSignKeyword_1_1_0_2() { return cOpGreaterThanSignKeyword_1_1_0_2; }
		
		//"<"
		public Keyword getOpLessThanSignKeyword_1_1_0_3() { return cOpLessThanSignKeyword_1_1_0_3; }
		
		//right=PlusOrMinus
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PlusOrMinus
		public RuleCall getRightPlusOrMinusParserRuleCall_1_2_0() { return cRightPlusOrMinusParserRuleCall_1_2_0; }
	}
	public class PlusOrMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.PlusOrMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulOrDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cConcatenateLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cPlusSignPlusSignKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMulOrDivParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusOrMinus Expression:
		//	MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-' | {Concatenate.left=current} '++') right=MulOrDiv)?;
		@Override public ParserRule getRule() { return rule; }
		
		//MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-' | {Concatenate.left=current} '++') right=MulOrDiv)?
		public Group getGroup() { return cGroup; }
		
		//MulOrDiv
		public RuleCall getMulOrDivParserRuleCall_0() { return cMulOrDivParserRuleCall_0; }
		
		//(({Plus.left=current} '+' | {Minus.left=current} '-' | {Concatenate.left=current} '++') right=MulOrDiv)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{Plus.left=current} '+' | {Minus.left=current} '-' | {Concatenate.left=current} '++'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//{Concatenate.left=current} '++'
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//{Concatenate.left=current}
		public Action getConcatenateLeftAction_1_0_2_0() { return cConcatenateLeftAction_1_0_2_0; }
		
		//'++'
		public Keyword getPlusSignPlusSignKeyword_1_0_2_1() { return cPlusSignPlusSignKeyword_1_0_2_1; }
		
		//right=MulOrDiv
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MulOrDiv
		public RuleCall getRightMulOrDivParserRuleCall_1_1_0() { return cRightMulOrDivParserRuleCall_1_1_0; }
	}
	public class MulOrDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.MulOrDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMulOrDivLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpPercentSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MulOrDiv Expression:
		//	Primary ({MulOrDiv.left=current} op=('*' | '/' | '%') right=Primary)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({MulOrDiv.left=current} op=('*' | '/' | '%') right=Primary)?
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({MulOrDiv.left=current} op=('*' | '/' | '%') right=Primary)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{MulOrDiv.left=current}
		public Action getMulOrDivLeftAction_1_0() { return cMulOrDivLeftAction_1_0; }
		
		//op=('*' | '/' | '%')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('*' | '/' | '%')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }
		
		//'%'
		public Keyword getOpPercentSignKeyword_1_1_0_2() { return cOpPercentSignKeyword_1_1_0_2; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnaryMinusAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cNotAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExpressionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_2_2_0 = (RuleCall)cExpressionAssignment_2_2.eContents().get(0);
		private final RuleCall cAtomicParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Primary Expression:
		//	'(' Expression ')' | {UnaryMinus} "-" expression=Primary | {Not} "!" expression=Primary | Atomic;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')' | {UnaryMinus} "-" expression=Primary | {Not} "!" expression=Primary | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{UnaryMinus} "-" expression=Primary
		public Group getGroup_1() { return cGroup_1; }
		
		//{UnaryMinus}
		public Action getUnaryMinusAction_1_0() { return cUnaryMinusAction_1_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_1_2_0() { return cExpressionPrimaryParserRuleCall_1_2_0; }
		
		//{Not} "!" expression=Primary
		public Group getGroup_2() { return cGroup_2; }
		
		//{Not}
		public Action getNotAction_2_0() { return cNotAction_2_0; }
		
		//"!"
		public Keyword getExclamationMarkKeyword_2_1() { return cExclamationMarkKeyword_2_1; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_2_2() { return cExpressionAssignment_2_2; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_2_2_0() { return cExpressionPrimaryParserRuleCall_2_2_0; }
		
		//Atomic
		public RuleCall getAtomicParserRuleCall_3() { return cAtomicParserRuleCall_3; }
	}
	public class LRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.LRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFuncParamParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFuncVarDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LRef:
		//	FuncParam | FuncVarDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//FuncParam | FuncVarDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FuncParam
		public RuleCall getFuncParamParserRuleCall_0() { return cFuncParamParserRuleCall_0; }
		
		//FuncVarDeclaration
		public RuleCall getFuncVarDeclarationParserRuleCall_1() { return cFuncVarDeclarationParserRuleCall_1; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBoolConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cValueAlternatives_2_1_0 = (Alternatives)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_1_0_0 = (Keyword)cValueAlternatives_2_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_1_0_1 = (Keyword)cValueAlternatives_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cLocalVarRefAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cRefAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRefLRefCrossReference_3_1_0 = (CrossReference)cRefAssignment_3_1.eContents().get(0);
		private final RuleCall cRefLRefIDTerminalRuleCall_3_1_0_1 = (RuleCall)cRefLRefCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cLocalAttributeRefAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cProcKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cFullStopKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cAttributeAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cAttributeIDTerminalRuleCall_4_3_0 = (RuleCall)cAttributeAssignment_4_3.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cFunctionCallAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cFunctionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cFunctionFuncDefinitionCrossReference_5_1_0 = (CrossReference)cFunctionAssignment_5_1.eContents().get(0);
		private final RuleCall cFunctionFuncDefinitionIDTerminalRuleCall_5_1_0_1 = (RuleCall)cFunctionFuncDefinitionCrossReference_5_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Assignment cParamsAssignment_5_3_0 = (Assignment)cGroup_5_3.eContents().get(0);
		private final RuleCall cParamsExpressionParserRuleCall_5_3_0_0 = (RuleCall)cParamsAssignment_5_3_0.eContents().get(0);
		private final Group cGroup_5_3_1 = (Group)cGroup_5_3.eContents().get(1);
		private final Keyword cCommaKeyword_5_3_1_0 = (Keyword)cGroup_5_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_5_3_1_1 = (Assignment)cGroup_5_3_1.eContents().get(1);
		private final RuleCall cParamsExpressionParserRuleCall_5_3_1_1_0 = (RuleCall)cParamsAssignment_5_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cComponentAttributeRefAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cCompKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cFullStopKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cAttributeAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cAttributeIDTerminalRuleCall_6_3_0 = (RuleCall)cAttributeAssignment_6_3.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cRecAttributeRefAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cReceiverKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cFullStopKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cAttributeAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cAttributeIDTerminalRuleCall_7_3_0 = (RuleCall)cAttributeAssignment_7_3.eContents().get(0);
		
		//Atomic Expression:
		//	{IntConstant} value=INT | {StringConstant} value=STRING | {BoolConstant} value=('true' | 'false') | {LocalVarRef}
		//	ref=[LRef] | {LocalAttributeRef} "proc" "." attribute=ID | {FunctionCall} function=[FuncDefinition] "("
		//	(params+=Expression ("," params+=Expression)*)? ")" | {ComponentAttributeRef} "comp" "." attribute=ID |
		//	{RecAttributeRef} "receiver" "." attribute=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntConstant} value=INT | {StringConstant} value=STRING | {BoolConstant} value=('true' | 'false') | {LocalVarRef}
		//ref=[LRef] | {LocalAttributeRef} "proc" "." attribute=ID | {FunctionCall} function=[FuncDefinition] "("
		//(params+=Expression ("," params+=Expression)*)? ")" | {ComponentAttributeRef} "comp" "." attribute=ID |
		//{RecAttributeRef} "receiver" "." attribute=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntConstant} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntConstant}
		public Action getIntConstantAction_0_0() { return cIntConstantAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{StringConstant} value=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//{StringConstant}
		public Action getStringConstantAction_1_0() { return cStringConstantAction_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }
		
		//{BoolConstant} value=('true' | 'false')
		public Group getGroup_2() { return cGroup_2; }
		
		//{BoolConstant}
		public Action getBoolConstantAction_2_0() { return cBoolConstantAction_2_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_2_1_0() { return cValueAlternatives_2_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_2_1_0_0() { return cValueTrueKeyword_2_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_2_1_0_1() { return cValueFalseKeyword_2_1_0_1; }
		
		//{LocalVarRef} ref=[LRef]
		public Group getGroup_3() { return cGroup_3; }
		
		//{LocalVarRef}
		public Action getLocalVarRefAction_3_0() { return cLocalVarRefAction_3_0; }
		
		//ref=[LRef]
		public Assignment getRefAssignment_3_1() { return cRefAssignment_3_1; }
		
		//[LRef]
		public CrossReference getRefLRefCrossReference_3_1_0() { return cRefLRefCrossReference_3_1_0; }
		
		//ID
		public RuleCall getRefLRefIDTerminalRuleCall_3_1_0_1() { return cRefLRefIDTerminalRuleCall_3_1_0_1; }
		
		//{LocalAttributeRef} "proc" "." attribute=ID
		public Group getGroup_4() { return cGroup_4; }
		
		//{LocalAttributeRef}
		public Action getLocalAttributeRefAction_4_0() { return cLocalAttributeRefAction_4_0; }
		
		//"proc"
		public Keyword getProcKeyword_4_1() { return cProcKeyword_4_1; }
		
		//"."
		public Keyword getFullStopKeyword_4_2() { return cFullStopKeyword_4_2; }
		
		//attribute=ID
		public Assignment getAttributeAssignment_4_3() { return cAttributeAssignment_4_3; }
		
		//ID
		public RuleCall getAttributeIDTerminalRuleCall_4_3_0() { return cAttributeIDTerminalRuleCall_4_3_0; }
		
		//{FunctionCall} function=[FuncDefinition] "(" (params+=Expression ("," params+=Expression)*)? ")"
		public Group getGroup_5() { return cGroup_5; }
		
		//{FunctionCall}
		public Action getFunctionCallAction_5_0() { return cFunctionCallAction_5_0; }
		
		//function=[FuncDefinition]
		public Assignment getFunctionAssignment_5_1() { return cFunctionAssignment_5_1; }
		
		//[FuncDefinition]
		public CrossReference getFunctionFuncDefinitionCrossReference_5_1_0() { return cFunctionFuncDefinitionCrossReference_5_1_0; }
		
		//ID
		public RuleCall getFunctionFuncDefinitionIDTerminalRuleCall_5_1_0_1() { return cFunctionFuncDefinitionIDTerminalRuleCall_5_1_0_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_5_2() { return cLeftParenthesisKeyword_5_2; }
		
		//(params+=Expression ("," params+=Expression)*)?
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//params+=Expression
		public Assignment getParamsAssignment_5_3_0() { return cParamsAssignment_5_3_0; }
		
		//Expression
		public RuleCall getParamsExpressionParserRuleCall_5_3_0_0() { return cParamsExpressionParserRuleCall_5_3_0_0; }
		
		//("," params+=Expression)*
		public Group getGroup_5_3_1() { return cGroup_5_3_1; }
		
		//","
		public Keyword getCommaKeyword_5_3_1_0() { return cCommaKeyword_5_3_1_0; }
		
		//params+=Expression
		public Assignment getParamsAssignment_5_3_1_1() { return cParamsAssignment_5_3_1_1; }
		
		//Expression
		public RuleCall getParamsExpressionParserRuleCall_5_3_1_1_0() { return cParamsExpressionParserRuleCall_5_3_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }
		
		//{ComponentAttributeRef} "comp" "." attribute=ID
		public Group getGroup_6() { return cGroup_6; }
		
		//{ComponentAttributeRef}
		public Action getComponentAttributeRefAction_6_0() { return cComponentAttributeRefAction_6_0; }
		
		//"comp"
		public Keyword getCompKeyword_6_1() { return cCompKeyword_6_1; }
		
		//"."
		public Keyword getFullStopKeyword_6_2() { return cFullStopKeyword_6_2; }
		
		//attribute=ID
		public Assignment getAttributeAssignment_6_3() { return cAttributeAssignment_6_3; }
		
		//ID
		public RuleCall getAttributeIDTerminalRuleCall_6_3_0() { return cAttributeIDTerminalRuleCall_6_3_0; }
		
		//{RecAttributeRef} "receiver" "." attribute=ID
		public Group getGroup_7() { return cGroup_7; }
		
		//{RecAttributeRef}
		public Action getRecAttributeRefAction_7_0() { return cRecAttributeRefAction_7_0; }
		
		//"receiver"
		public Keyword getReceiverKeyword_7_1() { return cReceiverKeyword_7_1; }
		
		//"."
		public Keyword getFullStopKeyword_7_2() { return cFullStopKeyword_7_2; }
		
		//attribute=ID
		public Assignment getAttributeAssignment_7_3() { return cAttributeAssignment_7_3; }
		
		//ID
		public RuleCall getAttributeIDTerminalRuleCall_7_3_0() { return cAttributeIDTerminalRuleCall_7_3_0; }
	}
	public class FuncParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTYPETerminalRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//// Functions
		//FuncParam:
		//	type=TYPE name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=TYPE name=ID
		public Group getGroup() { return cGroup; }
		
		//type=TYPE
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//TYPE
		public RuleCall getTypeTYPETerminalRuleCall_0_0() { return cTypeTYPETerminalRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class FuncDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTYPETerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParamsFuncParamParserRuleCall_4_0_0 = (RuleCall)cParamsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParamsFuncParamParserRuleCall_4_1_1_0 = (RuleCall)cParamsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBlkAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBlkFuncBlockParserRuleCall_6_0 = (RuleCall)cBlkAssignment_6.eContents().get(0);
		
		//FuncDefinition:
		//	'function' type=TYPE name=ID '(' (params+=FuncParam (',' params+=FuncParam)*)? ')' blk=FuncBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' type=TYPE name=ID '(' (params+=FuncParam (',' params+=FuncParam)*)? ')' blk=FuncBlock
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//type=TYPE
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//TYPE
		public RuleCall getTypeTYPETerminalRuleCall_1_0() { return cTypeTYPETerminalRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(params+=FuncParam (',' params+=FuncParam)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//params+=FuncParam
		public Assignment getParamsAssignment_4_0() { return cParamsAssignment_4_0; }
		
		//FuncParam
		public RuleCall getParamsFuncParamParserRuleCall_4_0_0() { return cParamsFuncParamParserRuleCall_4_0_0; }
		
		//(',' params+=FuncParam)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//params+=FuncParam
		public Assignment getParamsAssignment_4_1_1() { return cParamsAssignment_4_1_1; }
		
		//FuncParam
		public RuleCall getParamsFuncParamParserRuleCall_4_1_1_0() { return cParamsFuncParamParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//blk=FuncBlock
		public Assignment getBlkAssignment_6() { return cBlkAssignment_6; }
		
		//FuncBlock
		public RuleCall getBlkFuncBlockParserRuleCall_6_0() { return cBlkFuncBlockParserRuleCall_6_0; }
	}
	public class FuncBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cFuncBlockAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsFuncStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FuncBlock:
		//	'{' {FuncBlock} statements+=FuncStatement* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' {FuncBlock} statements+=FuncStatement* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//{FuncBlock}
		public Action getFuncBlockAction_1() { return cFuncBlockAction_1; }
		
		//statements+=FuncStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//FuncStatement
		public RuleCall getStatementsFuncStatementParserRuleCall_2_0() { return cStatementsFuncStatementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class FuncStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFuncVarAssignParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFuncIfElseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFuncReturnParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFuncVarDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//FuncStatement:
		//	FuncVarAssign | FuncIfElse | FuncReturn | FuncVarDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//FuncVarAssign | FuncIfElse | FuncReturn | FuncVarDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FuncVarAssign
		public RuleCall getFuncVarAssignParserRuleCall_0() { return cFuncVarAssignParserRuleCall_0; }
		
		//FuncIfElse
		public RuleCall getFuncIfElseParserRuleCall_1() { return cFuncIfElseParserRuleCall_1; }
		
		//FuncReturn
		public RuleCall getFuncReturnParserRuleCall_2() { return cFuncReturnParserRuleCall_2; }
		
		//FuncVarDeclaration
		public RuleCall getFuncVarDeclarationParserRuleCall_3() { return cFuncVarDeclarationParserRuleCall_3; }
	}
	public class FuncVarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncVarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValExpressionParserRuleCall_3_0 = (RuleCall)cValAssignment_3.eContents().get(0);
		
		//FuncVarDeclaration:
		//	'var' name=ID '=' val=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' name=ID '=' val=Expression
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//val=Expression
		public Assignment getValAssignment_3() { return cValAssignment_3; }
		
		//Expression
		public RuleCall getValExpressionParserRuleCall_3_0() { return cValExpressionParserRuleCall_3_0; }
	}
	public class FuncVarAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncVarAssign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVarFuncVarDeclarationCrossReference_0_0 = (CrossReference)cVarAssignment_0.eContents().get(0);
		private final RuleCall cVarFuncVarDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cVarFuncVarDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValExpressionParserRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		
		//FuncVarAssign:
		//	var=[FuncVarDeclaration] '=' val=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//var=[FuncVarDeclaration] '=' val=Expression
		public Group getGroup() { return cGroup; }
		
		//var=[FuncVarDeclaration]
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//[FuncVarDeclaration]
		public CrossReference getVarFuncVarDeclarationCrossReference_0_0() { return cVarFuncVarDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getVarFuncVarDeclarationIDTerminalRuleCall_0_0_1() { return cVarFuncVarDeclarationIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//val=Expression
		public Assignment getValAssignment_2() { return cValAssignment_2; }
		
		//Expression
		public RuleCall getValExpressionParserRuleCall_2_0() { return cValExpressionParserRuleCall_2_0; }
	}
	public class FuncIfElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncIfElse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTestAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTestExpressionParserRuleCall_2_0 = (RuleCall)cTestAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenFuncBlockParserRuleCall_4_0 = (RuleCall)cThenAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cIfKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cTestAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cTestExpressionParserRuleCall_5_3_0 = (RuleCall)cTestAssignment_5_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Assignment cThenAssignment_5_5 = (Assignment)cGroup_5.eContents().get(5);
		private final RuleCall cThenFuncBlockParserRuleCall_5_5_0 = (RuleCall)cThenAssignment_5_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cElseBranchAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cElseBranchFuncBlockParserRuleCall_6_1_0 = (RuleCall)cElseBranchAssignment_6_1.eContents().get(0);
		
		//FuncIfElse:
		//	'if' '(' test+=Expression ')' then+=FuncBlock ('else' 'if' '(' test+=Expression ')' then+=FuncBlock)* ('else'
		//	elseBranch=FuncBlock)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' test+=Expression ')' then+=FuncBlock ('else' 'if' '(' test+=Expression ')' then+=FuncBlock)* ('else'
		//elseBranch=FuncBlock)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//test+=Expression
		public Assignment getTestAssignment_2() { return cTestAssignment_2; }
		
		//Expression
		public RuleCall getTestExpressionParserRuleCall_2_0() { return cTestExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//then+=FuncBlock
		public Assignment getThenAssignment_4() { return cThenAssignment_4; }
		
		//FuncBlock
		public RuleCall getThenFuncBlockParserRuleCall_4_0() { return cThenFuncBlockParserRuleCall_4_0; }
		
		//('else' 'if' '(' test+=Expression ')' then+=FuncBlock)*
		public Group getGroup_5() { return cGroup_5; }
		
		//'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//'if'
		public Keyword getIfKeyword_5_1() { return cIfKeyword_5_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_2() { return cLeftParenthesisKeyword_5_2; }
		
		//test+=Expression
		public Assignment getTestAssignment_5_3() { return cTestAssignment_5_3; }
		
		//Expression
		public RuleCall getTestExpressionParserRuleCall_5_3_0() { return cTestExpressionParserRuleCall_5_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }
		
		//then+=FuncBlock
		public Assignment getThenAssignment_5_5() { return cThenAssignment_5_5; }
		
		//FuncBlock
		public RuleCall getThenFuncBlockParserRuleCall_5_5_0() { return cThenFuncBlockParserRuleCall_5_5_0; }
		
		//('else' elseBranch=FuncBlock)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'else'
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }
		
		//elseBranch=FuncBlock
		public Assignment getElseBranchAssignment_6_1() { return cElseBranchAssignment_6_1; }
		
		//FuncBlock
		public RuleCall getElseBranchFuncBlockParserRuleCall_6_1_0() { return cElseBranchFuncBlockParserRuleCall_6_1_0; }
	}
	public class FuncReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncReturn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValExpressionParserRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//FuncReturn:
		//	'return' val=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'return' val=Expression
		public Group getGroup() { return cGroup; }
		
		//'return'
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//val=Expression
		public Assignment getValAssignment_1() { return cValAssignment_1; }
		
		//Expression
		public RuleCall getValExpressionParserRuleCall_1_0() { return cValExpressionParserRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final ProcessDefinitionElements pProcessDefinition;
	private final PDPBlockElements pPDPBlock;
	private final PDPSpawnElements pPDPSpawn;
	private final PDPCallElements pPDPCall;
	private final ProcessBlockElements pProcessBlock;
	private final ProcessStatementElements pProcessStatement;
	private final ProcessSpawnElements pProcessSpawn;
	private final ProcessCallElements pProcessCall;
	private final ProcessSendElements pProcessSend;
	private final ProcessReceiveElements pProcessReceive;
	private final ProcessReceiveSingleElements pProcessReceiveSingle;
	private final EmptyProcessBlockElements pEmptyProcessBlock;
	private final ProcessReceiveMultipleElements pProcessReceiveMultiple;
	private final ReceiveCaseElements pReceiveCase;
	private final ProcessIfElements pProcessIf;
	private final ProcessThenBlockElements pProcessThenBlock;
	private final PTBThenElements pPTBThen;
	private final ProcessSetElements pProcessSet;
	private final ProcessWaitForElements pProcessWaitFor;
	private final ProcessLoopElements pProcessLoop;
	private final UpdateElements pUpdate;
	private final UpdateComponentAttributeElements pUpdateComponentAttribute;
	private final UpdateLocalAttributeElements pUpdateLocalAttribute;
	private final PrintStatementElements pPrintStatement;
	private final PrintAllStatementElements pPrintAllStatement;
	private final PrintFormattedStatementElements pPrintFormattedStatement;
	private final EnvInitValueElements pEnvInitValue;
	private final EnvironmentElements pEnvironment;
	private final EnvironmentDefinitionElements pEnvironmentDefinition;
	private final ComponentDefinitionElements pComponentDefinition;
	private final ExpressionElements pExpression;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final EqualityElements pEquality;
	private final ComparisonElements pComparison;
	private final PlusOrMinusElements pPlusOrMinus;
	private final MulOrDivElements pMulOrDiv;
	private final PrimaryElements pPrimary;
	private final LRefElements pLRef;
	private final AtomicElements pAtomic;
	private final TerminalRule tTYPE;
	private final FuncParamElements pFuncParam;
	private final FuncDefinitionElements pFuncDefinition;
	private final FuncBlockElements pFuncBlock;
	private final FuncStatementElements pFuncStatement;
	private final FuncVarDeclarationElements pFuncVarDeclaration;
	private final FuncVarAssignElements pFuncVarAssign;
	private final FuncIfElseElements pFuncIfElse;
	private final FuncReturnElements pFuncReturn;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GoatComponentsGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pProcessDefinition = new ProcessDefinitionElements();
		this.pPDPBlock = new PDPBlockElements();
		this.pPDPSpawn = new PDPSpawnElements();
		this.pPDPCall = new PDPCallElements();
		this.pProcessBlock = new ProcessBlockElements();
		this.pProcessStatement = new ProcessStatementElements();
		this.pProcessSpawn = new ProcessSpawnElements();
		this.pProcessCall = new ProcessCallElements();
		this.pProcessSend = new ProcessSendElements();
		this.pProcessReceive = new ProcessReceiveElements();
		this.pProcessReceiveSingle = new ProcessReceiveSingleElements();
		this.pEmptyProcessBlock = new EmptyProcessBlockElements();
		this.pProcessReceiveMultiple = new ProcessReceiveMultipleElements();
		this.pReceiveCase = new ReceiveCaseElements();
		this.pProcessIf = new ProcessIfElements();
		this.pProcessThenBlock = new ProcessThenBlockElements();
		this.pPTBThen = new PTBThenElements();
		this.pProcessSet = new ProcessSetElements();
		this.pProcessWaitFor = new ProcessWaitForElements();
		this.pProcessLoop = new ProcessLoopElements();
		this.pUpdate = new UpdateElements();
		this.pUpdateComponentAttribute = new UpdateComponentAttributeElements();
		this.pUpdateLocalAttribute = new UpdateLocalAttributeElements();
		this.pPrintStatement = new PrintStatementElements();
		this.pPrintAllStatement = new PrintAllStatementElements();
		this.pPrintFormattedStatement = new PrintFormattedStatementElements();
		this.pEnvInitValue = new EnvInitValueElements();
		this.pEnvironment = new EnvironmentElements();
		this.pEnvironmentDefinition = new EnvironmentDefinitionElements();
		this.pComponentDefinition = new ComponentDefinitionElements();
		this.pExpression = new ExpressionElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pEquality = new EqualityElements();
		this.pComparison = new ComparisonElements();
		this.pPlusOrMinus = new PlusOrMinusElements();
		this.pMulOrDiv = new MulOrDivElements();
		this.pPrimary = new PrimaryElements();
		this.pLRef = new LRefElements();
		this.pAtomic = new AtomicElements();
		this.tTYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.TYPE");
		this.pFuncParam = new FuncParamElements();
		this.pFuncDefinition = new FuncDefinitionElements();
		this.pFuncBlock = new FuncBlockElements();
		this.pFuncStatement = new FuncStatementElements();
		this.pFuncVarDeclaration = new FuncVarDeclarationElements();
		this.pFuncVarAssign = new FuncVarAssignElements();
		this.pFuncIfElse = new FuncIfElseElements();
		this.pFuncReturn = new FuncReturnElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.sysma.goat.eclipse_plugin.GoatComponents".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	{Model}
	//	'infrastructure' infrastructure=[infr::Infrastructure] (processes+=ProcessDefinition | components+=ComponentDefinition
	//	| functions+=FuncDefinition | environments+=EnvironmentDefinition)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	////Process
	//ProcessDefinition:
	//	'process' name=ID ('=' block=PDPBlock | block=ProcessBlock);
	public ProcessDefinitionElements getProcessDefinitionAccess() {
		return pProcessDefinition;
	}
	
	public ParserRule getProcessDefinitionRule() {
		return getProcessDefinitionAccess().getRule();
	}
	
	//PDPBlock ProcessBlock:
	//	(statements+=PDPSpawn "|")* statements+=PDPCall;
	public PDPBlockElements getPDPBlockAccess() {
		return pPDPBlock;
	}
	
	public ParserRule getPDPBlockRule() {
		return getPDPBlockAccess().getRule();
	}
	
	//PDPSpawn ProcessSpawn:
	//	proc=[ProcessDefinition];
	public PDPSpawnElements getPDPSpawnAccess() {
		return pPDPSpawn;
	}
	
	public ParserRule getPDPSpawnRule() {
		return getPDPSpawnAccess().getRule();
	}
	
	//PDPCall ProcessCall:
	//	proc=[ProcessDefinition];
	public PDPCallElements getPDPCallAccess() {
		return pPDPCall;
	}
	
	public ParserRule getPDPCallRule() {
		return getPDPCallAccess().getRule();
	}
	
	//ProcessBlock:
	//	"{" {ProcessBlock} statements+=ProcessStatement*
	//	"}";
	public ProcessBlockElements getProcessBlockAccess() {
		return pProcessBlock;
	}
	
	public ParserRule getProcessBlockRule() {
		return getProcessBlockAccess().getRule();
	}
	
	//ProcessStatement:
	//	ProcessSpawn | ProcessCall | ProcessSend | ProcessReceive | ProcessIf | ProcessSet | ProcessWaitFor | ProcessLoop;
	public ProcessStatementElements getProcessStatementAccess() {
		return pProcessStatement;
	}
	
	public ParserRule getProcessStatementRule() {
		return getProcessStatementAccess().getRule();
	}
	
	//ProcessSpawn:
	//	"spawn" "(" proc=[ProcessDefinition] ")";
	public ProcessSpawnElements getProcessSpawnAccess() {
		return pProcessSpawn;
	}
	
	public ParserRule getProcessSpawnRule() {
		return getProcessSpawnAccess().getRule();
	}
	
	//ProcessCall:
	//	"call" "(" proc=[ProcessDefinition] ")";
	public ProcessCallElements getProcessCallAccess() {
		return pProcessCall;
	}
	
	public ParserRule getProcessCallRule() {
		return getProcessCallAccess().getRule();
	}
	
	//ProcessSend:
	//	"send" "{" (msgOutParts+=Expression ("," msgOutParts+=Expression)*)? "}" "@" "(" send_pred=Expression ")"
	//	updates=Update print=PrintStatement? ";";
	public ProcessSendElements getProcessSendAccess() {
		return pProcessSend;
	}
	
	public ParserRule getProcessSendRule() {
		return getProcessSendAccess().getRule();
	}
	
	//ProcessReceive:
	//	ProcessReceiveSingle | ProcessReceiveMultiple;
	public ProcessReceiveElements getProcessReceiveAccess() {
		return pProcessReceive;
	}
	
	public ParserRule getProcessReceiveRule() {
		return getProcessReceiveAccess().getRule();
	}
	
	//ProcessReceiveSingle:
	//	"receive" cases+=ReceiveCase ";" then+=EmptyProcessBlock;
	public ProcessReceiveSingleElements getProcessReceiveSingleAccess() {
		return pProcessReceiveSingle;
	}
	
	public ParserRule getProcessReceiveSingleRule() {
		return getProcessReceiveSingleAccess().getRule();
	}
	
	//EmptyProcessBlock ProcessBlock:
	//	{ProcessBlock};
	public EmptyProcessBlockElements getEmptyProcessBlockAccess() {
		return pEmptyProcessBlock;
	}
	
	public ParserRule getEmptyProcessBlockRule() {
		return getEmptyProcessBlockAccess().getRule();
	}
	
	//ProcessReceiveMultiple:
	//	"receive" "{" ("case" cases+=ReceiveCase ":" then+=ProcessBlock)+
	//	"}";
	public ProcessReceiveMultipleElements getProcessReceiveMultipleAccess() {
		return pProcessReceiveMultiple;
	}
	
	public ParserRule getProcessReceiveMultipleRule() {
		return getProcessReceiveMultipleAccess().getRule();
	}
	
	//ReceiveCase:
	//	"(" cond=Expression ")" "{" (msgInParts+=ID ("," msgInParts+=ID)*)? "}"
	//	updates=Update print=PrintStatement?;
	public ReceiveCaseElements getReceiveCaseAccess() {
		return pReceiveCase;
	}
	
	public ParserRule getReceiveCaseRule() {
		return getReceiveCaseAccess().getRule();
	}
	
	//ProcessIf:
	//	"if" "(" cond+=Expression ")" ProcessThenBlock ("else" "if" "(" cond+=Expression ")" ProcessThenBlock)* ("else"
	//	ProcessThenBlock)?;
	public ProcessIfElements getProcessIfAccess() {
		return pProcessIf;
	}
	
	public ParserRule getProcessIfRule() {
		return getProcessIfAccess().getRule();
	}
	
	//fragment ProcessThenBlock:
	//	"{" action+=(ProcessSend | ProcessReceive | ProcessSet) then+=PTBThen "}";
	public ProcessThenBlockElements getProcessThenBlockAccess() {
		return pProcessThenBlock;
	}
	
	public ParserRule getProcessThenBlockRule() {
		return getProcessThenBlockAccess().getRule();
	}
	
	//PTBThen ProcessBlock:
	//	{ProcessBlock} statements+=ProcessStatement*;
	public PTBThenElements getPTBThenAccess() {
		return pPTBThen;
	}
	
	public ParserRule getPTBThenRule() {
		return getPTBThenAccess().getRule();
	}
	
	//ProcessSet:
	//	"set" update=Update print=PrintStatement? ";";
	public ProcessSetElements getProcessSetAccess() {
		return pProcessSet;
	}
	
	public ParserRule getProcessSetRule() {
		return getProcessSetAccess().getRule();
	}
	
	//ProcessWaitFor:
	//	"waitfor" "(" cond=Expression ")" update=Update print=PrintStatement? ";";
	public ProcessWaitForElements getProcessWaitForAccess() {
		return pProcessWaitFor;
	}
	
	public ParserRule getProcessWaitForRule() {
		return getProcessWaitForAccess().getRule();
	}
	
	//ProcessLoop:
	//	"loop" block=ProcessBlock;
	public ProcessLoopElements getProcessLoopAccess() {
		return pProcessLoop;
	}
	
	public ParserRule getProcessLoopRule() {
		return getProcessLoopAccess().getRule();
	}
	
	//Update:
	//	{Update} ("[" attribute+=(UpdateComponentAttribute | UpdateLocalAttribute) ":=" value+=Expression (","
	//	attribute+=(UpdateComponentAttribute | UpdateLocalAttribute) ":=" value+=Expression)* "]")?;
	public UpdateElements getUpdateAccess() {
		return pUpdate;
	}
	
	public ParserRule getUpdateRule() {
		return getUpdateAccess().getRule();
	}
	
	//UpdateComponentAttribute:
	//	"comp" "." atname=ID;
	public UpdateComponentAttributeElements getUpdateComponentAttributeAccess() {
		return pUpdateComponentAttribute;
	}
	
	public ParserRule getUpdateComponentAttributeRule() {
		return getUpdateComponentAttributeAccess().getRule();
	}
	
	//UpdateLocalAttribute:
	//	"proc" "." atname=ID;
	public UpdateLocalAttributeElements getUpdateLocalAttributeAccess() {
		return pUpdateLocalAttribute;
	}
	
	public ParserRule getUpdateLocalAttributeRule() {
		return getUpdateLocalAttributeAccess().getRule();
	}
	
	//PrintStatement:
	//	PrintFormattedStatement;
	public PrintStatementElements getPrintStatementAccess() {
		return pPrintStatement;
	}
	
	public ParserRule getPrintStatementRule() {
		return getPrintStatementAccess().getRule();
	}
	
	//PrintAllStatement:
	//	{PrintAllStatement} "print";
	public PrintAllStatementElements getPrintAllStatementAccess() {
		return pPrintAllStatement;
	}
	
	public ParserRule getPrintAllStatementRule() {
		return getPrintAllStatementAccess().getRule();
	}
	
	//PrintFormattedStatement:
	//	"print" "(" toPrint=STRING ")";
	public PrintFormattedStatementElements getPrintFormattedStatementAccess() {
		return pPrintFormattedStatement;
	}
	
	public ParserRule getPrintFormattedStatementRule() {
		return getPrintFormattedStatementAccess().getRule();
	}
	
	//// Component
	//EnvInitValue Expression:
	//	{NegativeIntConstant} "-" negvalue=INT | {IntConstant} value=INT | {StringConstant} value=STRING | {BoolConstant}
	//	value=('true' | 'false');
	public EnvInitValueElements getEnvInitValueAccess() {
		return pEnvInitValue;
	}
	
	public ParserRule getEnvInitValueRule() {
		return getEnvInitValueAccess().getRule();
	}
	
	//Environment:
	//	{Environment} "{" (attrs+=ID ':=' vals+=EnvInitValue ("," attrs+=ID ':=' vals+=EnvInitValue)*)? "}";
	public EnvironmentElements getEnvironmentAccess() {
		return pEnvironment;
	}
	
	public ParserRule getEnvironmentRule() {
		return getEnvironmentAccess().getRule();
	}
	
	//EnvironmentDefinition:
	//	'environment' name=ID env=Environment;
	public EnvironmentDefinitionElements getEnvironmentDefinitionAccess() {
		return pEnvironmentDefinition;
	}
	
	public ParserRule getEnvironmentDefinitionRule() {
		return getEnvironmentDefinitionAccess().getRule();
	}
	
	//ComponentDefinition:
	//	"component" (envref=[EnvironmentDefinition] | env=Environment) ':' block=(PDPBlock | ProcessBlock);
	public ComponentDefinitionElements getComponentDefinitionAccess() {
		return pComponentDefinition;
	}
	
	public ParserRule getComponentDefinitionRule() {
		return getComponentDefinitionAccess().getRule();
	}
	
	//// Expression
	//Expression:
	//	Or;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Or Expression:
	//	And ({Or.sub+=current} "||" sub+=And)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And Expression:
	//	Equality ({And.sub+=current} "&&" sub+=Equality)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Equality Expression:
	//	Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)?;
	public EqualityElements getEqualityAccess() {
		return pEquality;
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}
	
	//Comparison Expression:
	//	PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)?;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//PlusOrMinus Expression:
	//	MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-' | {Concatenate.left=current} '++') right=MulOrDiv)?;
	public PlusOrMinusElements getPlusOrMinusAccess() {
		return pPlusOrMinus;
	}
	
	public ParserRule getPlusOrMinusRule() {
		return getPlusOrMinusAccess().getRule();
	}
	
	//MulOrDiv Expression:
	//	Primary ({MulOrDiv.left=current} op=('*' | '/' | '%') right=Primary)?;
	public MulOrDivElements getMulOrDivAccess() {
		return pMulOrDiv;
	}
	
	public ParserRule getMulOrDivRule() {
		return getMulOrDivAccess().getRule();
	}
	
	//Primary Expression:
	//	'(' Expression ')' | {UnaryMinus} "-" expression=Primary | {Not} "!" expression=Primary | Atomic;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//LRef:
	//	FuncParam | FuncVarDeclaration;
	public LRefElements getLRefAccess() {
		return pLRef;
	}
	
	public ParserRule getLRefRule() {
		return getLRefAccess().getRule();
	}
	
	//Atomic Expression:
	//	{IntConstant} value=INT | {StringConstant} value=STRING | {BoolConstant} value=('true' | 'false') | {LocalVarRef}
	//	ref=[LRef] | {LocalAttributeRef} "proc" "." attribute=ID | {FunctionCall} function=[FuncDefinition] "("
	//	(params+=Expression ("," params+=Expression)*)? ")" | {ComponentAttributeRef} "comp" "." attribute=ID |
	//	{RecAttributeRef} "receiver" "." attribute=ID;
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//terminal TYPE:
	//	'int' | 'string' | 'bool';
	public TerminalRule getTYPERule() {
		return tTYPE;
	}
	
	//// Functions
	//FuncParam:
	//	type=TYPE name=ID;
	public FuncParamElements getFuncParamAccess() {
		return pFuncParam;
	}
	
	public ParserRule getFuncParamRule() {
		return getFuncParamAccess().getRule();
	}
	
	//FuncDefinition:
	//	'function' type=TYPE name=ID '(' (params+=FuncParam (',' params+=FuncParam)*)? ')' blk=FuncBlock;
	public FuncDefinitionElements getFuncDefinitionAccess() {
		return pFuncDefinition;
	}
	
	public ParserRule getFuncDefinitionRule() {
		return getFuncDefinitionAccess().getRule();
	}
	
	//FuncBlock:
	//	'{' {FuncBlock} statements+=FuncStatement* '}';
	public FuncBlockElements getFuncBlockAccess() {
		return pFuncBlock;
	}
	
	public ParserRule getFuncBlockRule() {
		return getFuncBlockAccess().getRule();
	}
	
	//FuncStatement:
	//	FuncVarAssign | FuncIfElse | FuncReturn | FuncVarDeclaration;
	public FuncStatementElements getFuncStatementAccess() {
		return pFuncStatement;
	}
	
	public ParserRule getFuncStatementRule() {
		return getFuncStatementAccess().getRule();
	}
	
	//FuncVarDeclaration:
	//	'var' name=ID '=' val=Expression;
	public FuncVarDeclarationElements getFuncVarDeclarationAccess() {
		return pFuncVarDeclaration;
	}
	
	public ParserRule getFuncVarDeclarationRule() {
		return getFuncVarDeclarationAccess().getRule();
	}
	
	//FuncVarAssign:
	//	var=[FuncVarDeclaration] '=' val=Expression;
	public FuncVarAssignElements getFuncVarAssignAccess() {
		return pFuncVarAssign;
	}
	
	public ParserRule getFuncVarAssignRule() {
		return getFuncVarAssignAccess().getRule();
	}
	
	//FuncIfElse:
	//	'if' '(' test+=Expression ')' then+=FuncBlock ('else' 'if' '(' test+=Expression ')' then+=FuncBlock)* ('else'
	//	elseBranch=FuncBlock)?;
	public FuncIfElseElements getFuncIfElseAccess() {
		return pFuncIfElse;
	}
	
	public ParserRule getFuncIfElseRule() {
		return getFuncIfElseAccess().getRule();
	}
	
	//FuncReturn:
	//	'return' val=Expression;
	public FuncReturnElements getFuncReturnAccess() {
		return pFuncReturn;
	}
	
	public ParserRule getFuncReturnRule() {
		return getFuncReturnAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
